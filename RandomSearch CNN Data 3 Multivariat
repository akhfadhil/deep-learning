{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":9291,"status":"ok","timestamp":1675010871858,"user":{"displayName":"Fanny F","userId":"11831095778884674749"},"user_tz":-420},"id":"gkEL3KkBMvHe"},"outputs":[],"source":["import pandas as pd\n","from pandas import DataFrame\n","from pandas import concat\n","from matplotlib import pyplot\n","from sklearn.preprocessing import MinMaxScaler\n","import time\n","from numpy import concatenate\n","import numpy as np\n","import seaborn as sns\n","from keras.layers.convolutional import Conv1D\n","from keras.layers.convolutional import MaxPooling1D\n","from tensorflow.keras.layers import MaxPool1D\n","from keras.layers import Flatten\n","from keras.layers import Dense\n","import matplotlib.pyplot as plt\n","\n","from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import mean_absolute_error\n","from sklearn.metrics import r2_score\n","from tensorflow.python.keras.layers import Dense, LSTM , Dropout\n","from tensorflow.python.keras import Sequential\n","from math import sqrt;\n","import tensorflow as tf"]},{"cell_type":"markdown","metadata":{"id":"aPEJqTIAH7EA"},"source":["# Dataset Preprocessing & Feature Extraction"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":467},"executionInfo":{"elapsed":6337,"status":"ok","timestamp":1674982353929,"user":{"displayName":"Fanny F","userId":"11831095778884674749"},"user_tz":-420},"id":"-Vrc0ebeM2oh","outputId":"1aa4b272-04d8-451c-e0fc-059e32eecba2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                           generation biomass  \\\n","time                                            \n","2015-01-01 00:00:00+01:00               447.0   \n","2015-01-01 01:00:00+01:00               449.0   \n","2015-01-01 02:00:00+01:00               448.0   \n","2015-01-01 03:00:00+01:00               438.0   \n","2015-01-01 04:00:00+01:00               428.0   \n","\n","                           generation fossil brown coal/lignite  \\\n","time                                                              \n","2015-01-01 00:00:00+01:00                                 329.0   \n","2015-01-01 01:00:00+01:00                                 328.0   \n","2015-01-01 02:00:00+01:00                                 323.0   \n","2015-01-01 03:00:00+01:00                                 254.0   \n","2015-01-01 04:00:00+01:00                                 187.0   \n","\n","                           generation fossil coal-derived gas  \\\n","time                                                            \n","2015-01-01 00:00:00+01:00                                 0.0   \n","2015-01-01 01:00:00+01:00                                 0.0   \n","2015-01-01 02:00:00+01:00                                 0.0   \n","2015-01-01 03:00:00+01:00                                 0.0   \n","2015-01-01 04:00:00+01:00                                 0.0   \n","\n","                           generation fossil gas  generation fossil hard coal  \\\n","time                                                                            \n","2015-01-01 00:00:00+01:00                 4844.0                       4821.0   \n","2015-01-01 01:00:00+01:00                 5196.0                       4755.0   \n","2015-01-01 02:00:00+01:00                 4857.0                       4581.0   \n","2015-01-01 03:00:00+01:00                 4314.0                       4131.0   \n","2015-01-01 04:00:00+01:00                 4130.0                       3840.0   \n","\n","                           generation fossil oil  generation fossil oil shale  \\\n","time                                                                            \n","2015-01-01 00:00:00+01:00                  162.0                          0.0   \n","2015-01-01 01:00:00+01:00                  158.0                          0.0   \n","2015-01-01 02:00:00+01:00                  157.0                          0.0   \n","2015-01-01 03:00:00+01:00                  160.0                          0.0   \n","2015-01-01 04:00:00+01:00                  156.0                          0.0   \n","\n","                           generation fossil peat  generation geothermal  \\\n","time                                                                       \n","2015-01-01 00:00:00+01:00                     0.0                    0.0   \n","2015-01-01 01:00:00+01:00                     0.0                    0.0   \n","2015-01-01 02:00:00+01:00                     0.0                    0.0   \n","2015-01-01 03:00:00+01:00                     0.0                    0.0   \n","2015-01-01 04:00:00+01:00                     0.0                    0.0   \n","\n","                           generation hydro pumped storage aggregated  ...  \\\n","time                                                                   ...   \n","2015-01-01 00:00:00+01:00                                         NaN  ...   \n","2015-01-01 01:00:00+01:00                                         NaN  ...   \n","2015-01-01 02:00:00+01:00                                         NaN  ...   \n","2015-01-01 03:00:00+01:00                                         NaN  ...   \n","2015-01-01 04:00:00+01:00                                         NaN  ...   \n","\n","                           generation waste  generation wind offshore  \\\n","time                                                                    \n","2015-01-01 00:00:00+01:00             196.0                       0.0   \n","2015-01-01 01:00:00+01:00             195.0                       0.0   \n","2015-01-01 02:00:00+01:00             196.0                       0.0   \n","2015-01-01 03:00:00+01:00             191.0                       0.0   \n","2015-01-01 04:00:00+01:00             189.0                       0.0   \n","\n","                           generation wind onshore  forecast solar day ahead  \\\n","time                                                                           \n","2015-01-01 00:00:00+01:00                   6378.0                      17.0   \n","2015-01-01 01:00:00+01:00                   5890.0                      16.0   \n","2015-01-01 02:00:00+01:00                   5461.0                       8.0   \n","2015-01-01 03:00:00+01:00                   5238.0                       2.0   \n","2015-01-01 04:00:00+01:00                   4935.0                       9.0   \n","\n","                           forecast wind offshore eday ahead  \\\n","time                                                           \n","2015-01-01 00:00:00+01:00                                NaN   \n","2015-01-01 01:00:00+01:00                                NaN   \n","2015-01-01 02:00:00+01:00                                NaN   \n","2015-01-01 03:00:00+01:00                                NaN   \n","2015-01-01 04:00:00+01:00                                NaN   \n","\n","                           forecast wind onshore day ahead  \\\n","time                                                         \n","2015-01-01 00:00:00+01:00                           6436.0   \n","2015-01-01 01:00:00+01:00                           5856.0   \n","2015-01-01 02:00:00+01:00                           5454.0   \n","2015-01-01 03:00:00+01:00                           5151.0   \n","2015-01-01 04:00:00+01:00                           4861.0   \n","\n","                           total load forecast  total load actual  \\\n","time                                                                \n","2015-01-01 00:00:00+01:00              26118.0            25385.0   \n","2015-01-01 01:00:00+01:00              24934.0            24382.0   \n","2015-01-01 02:00:00+01:00              23515.0            22734.0   \n","2015-01-01 03:00:00+01:00              22642.0            21286.0   \n","2015-01-01 04:00:00+01:00              21785.0            20264.0   \n","\n","                           price day ahead  price actual  \n","time                                                      \n","2015-01-01 00:00:00+01:00            50.10         65.41  \n","2015-01-01 01:00:00+01:00            48.10         64.92  \n","2015-01-01 02:00:00+01:00            47.33         64.48  \n","2015-01-01 03:00:00+01:00            42.27         59.32  \n","2015-01-01 04:00:00+01:00            38.41         56.04  \n","\n","[5 rows x 28 columns]"],"text/html":["\n","  <div id=\"df-6abcb320-5ba8-4037-b3f3-94af550c78d5\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>generation biomass</th>\n","      <th>generation fossil brown coal/lignite</th>\n","      <th>generation fossil coal-derived gas</th>\n","      <th>generation fossil gas</th>\n","      <th>generation fossil hard coal</th>\n","      <th>generation fossil oil</th>\n","      <th>generation fossil oil shale</th>\n","      <th>generation fossil peat</th>\n","      <th>generation geothermal</th>\n","      <th>generation hydro pumped storage aggregated</th>\n","      <th>...</th>\n","      <th>generation waste</th>\n","      <th>generation wind offshore</th>\n","      <th>generation wind onshore</th>\n","      <th>forecast solar day ahead</th>\n","      <th>forecast wind offshore eday ahead</th>\n","      <th>forecast wind onshore day ahead</th>\n","      <th>total load forecast</th>\n","      <th>total load actual</th>\n","      <th>price day ahead</th>\n","      <th>price actual</th>\n","    </tr>\n","    <tr>\n","      <th>time</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2015-01-01 00:00:00+01:00</th>\n","      <td>447.0</td>\n","      <td>329.0</td>\n","      <td>0.0</td>\n","      <td>4844.0</td>\n","      <td>4821.0</td>\n","      <td>162.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>196.0</td>\n","      <td>0.0</td>\n","      <td>6378.0</td>\n","      <td>17.0</td>\n","      <td>NaN</td>\n","      <td>6436.0</td>\n","      <td>26118.0</td>\n","      <td>25385.0</td>\n","      <td>50.10</td>\n","      <td>65.41</td>\n","    </tr>\n","    <tr>\n","      <th>2015-01-01 01:00:00+01:00</th>\n","      <td>449.0</td>\n","      <td>328.0</td>\n","      <td>0.0</td>\n","      <td>5196.0</td>\n","      <td>4755.0</td>\n","      <td>158.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>195.0</td>\n","      <td>0.0</td>\n","      <td>5890.0</td>\n","      <td>16.0</td>\n","      <td>NaN</td>\n","      <td>5856.0</td>\n","      <td>24934.0</td>\n","      <td>24382.0</td>\n","      <td>48.10</td>\n","      <td>64.92</td>\n","    </tr>\n","    <tr>\n","      <th>2015-01-01 02:00:00+01:00</th>\n","      <td>448.0</td>\n","      <td>323.0</td>\n","      <td>0.0</td>\n","      <td>4857.0</td>\n","      <td>4581.0</td>\n","      <td>157.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>196.0</td>\n","      <td>0.0</td>\n","      <td>5461.0</td>\n","      <td>8.0</td>\n","      <td>NaN</td>\n","      <td>5454.0</td>\n","      <td>23515.0</td>\n","      <td>22734.0</td>\n","      <td>47.33</td>\n","      <td>64.48</td>\n","    </tr>\n","    <tr>\n","      <th>2015-01-01 03:00:00+01:00</th>\n","      <td>438.0</td>\n","      <td>254.0</td>\n","      <td>0.0</td>\n","      <td>4314.0</td>\n","      <td>4131.0</td>\n","      <td>160.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>191.0</td>\n","      <td>0.0</td>\n","      <td>5238.0</td>\n","      <td>2.0</td>\n","      <td>NaN</td>\n","      <td>5151.0</td>\n","      <td>22642.0</td>\n","      <td>21286.0</td>\n","      <td>42.27</td>\n","      <td>59.32</td>\n","    </tr>\n","    <tr>\n","      <th>2015-01-01 04:00:00+01:00</th>\n","      <td>428.0</td>\n","      <td>187.0</td>\n","      <td>0.0</td>\n","      <td>4130.0</td>\n","      <td>3840.0</td>\n","      <td>156.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>189.0</td>\n","      <td>0.0</td>\n","      <td>4935.0</td>\n","      <td>9.0</td>\n","      <td>NaN</td>\n","      <td>4861.0</td>\n","      <td>21785.0</td>\n","      <td>20264.0</td>\n","      <td>38.41</td>\n","      <td>56.04</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 28 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6abcb320-5ba8-4037-b3f3-94af550c78d5')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-6abcb320-5ba8-4037-b3f3-94af550c78d5 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-6abcb320-5ba8-4037-b3f3-94af550c78d5');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":2}],"source":["url = \"https://drive.google.com/file/d/1u95FUEFI29NV-LmdCRHzRwj-t4tWH87m/view?usp=share_link\"\n","url='https://drive.google.com/uc?id=' + url.split('/')[-2]\n","df = pd.read_csv(url, parse_dates = True,index_col=0)\n","df.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1674982353930,"user":{"displayName":"Fanny F","userId":"11831095778884674749"},"user_tz":-420},"id":"OXp5XF5LNLQk","outputId":"36067f77-8aee-4f03-a6aa-a97ea678a39f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(35064, 28)"]},"metadata":{},"execution_count":3}],"source":["df.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":569,"status":"ok","timestamp":1674982354492,"user":{"displayName":"Fanny F","userId":"11831095778884674749"},"user_tz":-420},"id":"UBhKkaTJPH8m","outputId":"33cdef51-7fb5-448b-d18c-c9a3be96fb5e"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 35064 entries, 2015-01-01 00:00:00+01:00 to 2018-12-31 23:00:00+01:00\n","Data columns (total 28 columns):\n"," #   Column                                       Non-Null Count  Dtype  \n","---  ------                                       --------------  -----  \n"," 0   generation biomass                           35045 non-null  float64\n"," 1   generation fossil brown coal/lignite         35046 non-null  float64\n"," 2   generation fossil coal-derived gas           35046 non-null  float64\n"," 3   generation fossil gas                        35046 non-null  float64\n"," 4   generation fossil hard coal                  35046 non-null  float64\n"," 5   generation fossil oil                        35045 non-null  float64\n"," 6   generation fossil oil shale                  35046 non-null  float64\n"," 7   generation fossil peat                       35046 non-null  float64\n"," 8   generation geothermal                        35046 non-null  float64\n"," 9   generation hydro pumped storage aggregated   0 non-null      float64\n"," 10  generation hydro pumped storage consumption  35045 non-null  float64\n"," 11  generation hydro run-of-river and poundage   35045 non-null  float64\n"," 12  generation hydro water reservoir             35046 non-null  float64\n"," 13  generation marine                            35045 non-null  float64\n"," 14  generation nuclear                           35047 non-null  float64\n"," 15  generation other                             35046 non-null  float64\n"," 16  generation other renewable                   35046 non-null  float64\n"," 17  generation solar                             35046 non-null  float64\n"," 18  generation waste                             35045 non-null  float64\n"," 19  generation wind offshore                     35046 non-null  float64\n"," 20  generation wind onshore                      35046 non-null  float64\n"," 21  forecast solar day ahead                     35064 non-null  float64\n"," 22  forecast wind offshore eday ahead            0 non-null      float64\n"," 23  forecast wind onshore day ahead              35064 non-null  float64\n"," 24  total load forecast                          35064 non-null  float64\n"," 25  total load actual                            35028 non-null  float64\n"," 26  price day ahead                              35064 non-null  float64\n"," 27  price actual                                 35064 non-null  float64\n","dtypes: float64(28)\n","memory usage: 7.8+ MB\n"]}],"source":["df.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":463},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1674982354493,"user":{"displayName":"Fanny F","userId":"11831095778884674749"},"user_tz":-420},"id":"YIExvDrNVdxI","outputId":"d6b855d5-71f5-4291-f963-53fd3ee00923"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["       generation biomass  generation fossil brown coal/lignite  \\\n","count        35045.000000                          35046.000000   \n","mean           383.513540                            448.059208   \n","std             85.353943                            354.568590   \n","min              0.000000                              0.000000   \n","25%            333.000000                              0.000000   \n","50%            367.000000                            509.000000   \n","75%            433.000000                            757.000000   \n","max            592.000000                            999.000000   \n","\n","       generation fossil coal-derived gas  generation fossil gas  \\\n","count                             35046.0           35046.000000   \n","mean                                  0.0            5622.737488   \n","std                                   0.0            2201.830478   \n","min                                   0.0               0.000000   \n","25%                                   0.0            4126.000000   \n","50%                                   0.0            4969.000000   \n","75%                                   0.0            6429.000000   \n","max                                   0.0           20034.000000   \n","\n","       generation fossil hard coal  generation fossil oil  \\\n","count                 35046.000000           35045.000000   \n","mean                   4256.065742             298.319789   \n","std                    1961.601013              52.520673   \n","min                       0.000000               0.000000   \n","25%                    2527.000000             263.000000   \n","50%                    4474.000000             300.000000   \n","75%                    5838.750000             330.000000   \n","max                    8359.000000             449.000000   \n","\n","       generation fossil oil shale  generation fossil peat  \\\n","count                      35046.0                 35046.0   \n","mean                           0.0                     0.0   \n","std                            0.0                     0.0   \n","min                            0.0                     0.0   \n","25%                            0.0                     0.0   \n","50%                            0.0                     0.0   \n","75%                            0.0                     0.0   \n","max                            0.0                     0.0   \n","\n","       generation geothermal  generation hydro pumped storage aggregated  ...  \\\n","count                35046.0                                         0.0  ...   \n","mean                     0.0                                         NaN  ...   \n","std                      0.0                                         NaN  ...   \n","min                      0.0                                         NaN  ...   \n","25%                      0.0                                         NaN  ...   \n","50%                      0.0                                         NaN  ...   \n","75%                      0.0                                         NaN  ...   \n","max                      0.0                                         NaN  ...   \n","\n","       generation waste  generation wind offshore  generation wind onshore  \\\n","count      35045.000000                   35046.0             35046.000000   \n","mean         269.452133                       0.0              5464.479769   \n","std           50.195536                       0.0              3213.691587   \n","min            0.000000                       0.0                 0.000000   \n","25%          240.000000                       0.0              2933.000000   \n","50%          279.000000                       0.0              4849.000000   \n","75%          310.000000                       0.0              7398.000000   \n","max          357.000000                       0.0             17436.000000   \n","\n","       forecast solar day ahead  forecast wind offshore eday ahead  \\\n","count              35064.000000                                0.0   \n","mean                1439.066735                                NaN   \n","std                 1677.703355                                NaN   \n","min                    0.000000                                NaN   \n","25%                   69.000000                                NaN   \n","50%                  576.000000                                NaN   \n","75%                 2636.000000                                NaN   \n","max                 5836.000000                                NaN   \n","\n","       forecast wind onshore day ahead  total load forecast  \\\n","count                     35064.000000         35064.000000   \n","mean                       5471.216689         28712.129962   \n","std                        3176.312853          4594.100854   \n","min                         237.000000         18105.000000   \n","25%                        2979.000000         24793.750000   \n","50%                        4855.000000         28906.000000   \n","75%                        7353.000000         32263.250000   \n","max                       17430.000000         41390.000000   \n","\n","       total load actual  price day ahead  price actual  \n","count       35028.000000     35064.000000  35064.000000  \n","mean        28696.939905        49.874341     57.884023  \n","std          4574.987950        14.618900     14.204083  \n","min         18041.000000         2.060000      9.330000  \n","25%         24807.750000        41.490000     49.347500  \n","50%         28901.000000        50.520000     58.020000  \n","75%         32192.000000        60.530000     68.010000  \n","max         41015.000000       101.990000    116.800000  \n","\n","[8 rows x 28 columns]"],"text/html":["\n","  <div id=\"df-59d0c1a0-dea6-47a0-b8b5-368fd6a83116\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>generation biomass</th>\n","      <th>generation fossil brown coal/lignite</th>\n","      <th>generation fossil coal-derived gas</th>\n","      <th>generation fossil gas</th>\n","      <th>generation fossil hard coal</th>\n","      <th>generation fossil oil</th>\n","      <th>generation fossil oil shale</th>\n","      <th>generation fossil peat</th>\n","      <th>generation geothermal</th>\n","      <th>generation hydro pumped storage aggregated</th>\n","      <th>...</th>\n","      <th>generation waste</th>\n","      <th>generation wind offshore</th>\n","      <th>generation wind onshore</th>\n","      <th>forecast solar day ahead</th>\n","      <th>forecast wind offshore eday ahead</th>\n","      <th>forecast wind onshore day ahead</th>\n","      <th>total load forecast</th>\n","      <th>total load actual</th>\n","      <th>price day ahead</th>\n","      <th>price actual</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>35045.000000</td>\n","      <td>35046.000000</td>\n","      <td>35046.0</td>\n","      <td>35046.000000</td>\n","      <td>35046.000000</td>\n","      <td>35045.000000</td>\n","      <td>35046.0</td>\n","      <td>35046.0</td>\n","      <td>35046.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>35045.000000</td>\n","      <td>35046.0</td>\n","      <td>35046.000000</td>\n","      <td>35064.000000</td>\n","      <td>0.0</td>\n","      <td>35064.000000</td>\n","      <td>35064.000000</td>\n","      <td>35028.000000</td>\n","      <td>35064.000000</td>\n","      <td>35064.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>383.513540</td>\n","      <td>448.059208</td>\n","      <td>0.0</td>\n","      <td>5622.737488</td>\n","      <td>4256.065742</td>\n","      <td>298.319789</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>269.452133</td>\n","      <td>0.0</td>\n","      <td>5464.479769</td>\n","      <td>1439.066735</td>\n","      <td>NaN</td>\n","      <td>5471.216689</td>\n","      <td>28712.129962</td>\n","      <td>28696.939905</td>\n","      <td>49.874341</td>\n","      <td>57.884023</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>85.353943</td>\n","      <td>354.568590</td>\n","      <td>0.0</td>\n","      <td>2201.830478</td>\n","      <td>1961.601013</td>\n","      <td>52.520673</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>50.195536</td>\n","      <td>0.0</td>\n","      <td>3213.691587</td>\n","      <td>1677.703355</td>\n","      <td>NaN</td>\n","      <td>3176.312853</td>\n","      <td>4594.100854</td>\n","      <td>4574.987950</td>\n","      <td>14.618900</td>\n","      <td>14.204083</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>NaN</td>\n","      <td>237.000000</td>\n","      <td>18105.000000</td>\n","      <td>18041.000000</td>\n","      <td>2.060000</td>\n","      <td>9.330000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>333.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>4126.000000</td>\n","      <td>2527.000000</td>\n","      <td>263.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>240.000000</td>\n","      <td>0.0</td>\n","      <td>2933.000000</td>\n","      <td>69.000000</td>\n","      <td>NaN</td>\n","      <td>2979.000000</td>\n","      <td>24793.750000</td>\n","      <td>24807.750000</td>\n","      <td>41.490000</td>\n","      <td>49.347500</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>367.000000</td>\n","      <td>509.000000</td>\n","      <td>0.0</td>\n","      <td>4969.000000</td>\n","      <td>4474.000000</td>\n","      <td>300.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>279.000000</td>\n","      <td>0.0</td>\n","      <td>4849.000000</td>\n","      <td>576.000000</td>\n","      <td>NaN</td>\n","      <td>4855.000000</td>\n","      <td>28906.000000</td>\n","      <td>28901.000000</td>\n","      <td>50.520000</td>\n","      <td>58.020000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>433.000000</td>\n","      <td>757.000000</td>\n","      <td>0.0</td>\n","      <td>6429.000000</td>\n","      <td>5838.750000</td>\n","      <td>330.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>310.000000</td>\n","      <td>0.0</td>\n","      <td>7398.000000</td>\n","      <td>2636.000000</td>\n","      <td>NaN</td>\n","      <td>7353.000000</td>\n","      <td>32263.250000</td>\n","      <td>32192.000000</td>\n","      <td>60.530000</td>\n","      <td>68.010000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>592.000000</td>\n","      <td>999.000000</td>\n","      <td>0.0</td>\n","      <td>20034.000000</td>\n","      <td>8359.000000</td>\n","      <td>449.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>357.000000</td>\n","      <td>0.0</td>\n","      <td>17436.000000</td>\n","      <td>5836.000000</td>\n","      <td>NaN</td>\n","      <td>17430.000000</td>\n","      <td>41390.000000</td>\n","      <td>41015.000000</td>\n","      <td>101.990000</td>\n","      <td>116.800000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>8 rows × 28 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-59d0c1a0-dea6-47a0-b8b5-368fd6a83116')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-59d0c1a0-dea6-47a0-b8b5-368fd6a83116 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-59d0c1a0-dea6-47a0-b8b5-368fd6a83116');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}],"source":["df.describe()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1674982354493,"user":{"displayName":"Fanny F","userId":"11831095778884674749"},"user_tz":-420},"id":"B7EDscvFNFCf","outputId":"d68c588b-72ab-49ca-f8c1-47609392a043"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["generation biomass                                19\n","generation fossil brown coal/lignite              18\n","generation fossil coal-derived gas                18\n","generation fossil gas                             18\n","generation fossil hard coal                       18\n","generation fossil oil                             19\n","generation fossil oil shale                       18\n","generation fossil peat                            18\n","generation geothermal                             18\n","generation hydro pumped storage aggregated     35064\n","generation hydro pumped storage consumption       19\n","generation hydro run-of-river and poundage        19\n","generation hydro water reservoir                  18\n","generation marine                                 19\n","generation nuclear                                17\n","generation other                                  18\n","generation other renewable                        18\n","generation solar                                  18\n","generation waste                                  19\n","generation wind offshore                          18\n","generation wind onshore                           18\n","forecast solar day ahead                           0\n","forecast wind offshore eday ahead              35064\n","forecast wind onshore day ahead                    0\n","total load forecast                                0\n","total load actual                                 36\n","price day ahead                                    0\n","price actual                                       0\n","dtype: int64"]},"metadata":{},"execution_count":6}],"source":["# Jumlah missing value\n","df.isnull().sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"elapsed":873,"status":"ok","timestamp":1674982355361,"user":{"displayName":"Fanny F","userId":"11831095778884674749"},"user_tz":-420},"id":"F8YnC-EZMgJg","outputId":"1a21ff9b-625d-4afc-d719-5769a2e4543b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f8d89570cd0>"]},"metadata":{},"execution_count":7},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["df['total load actual'].plot()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1674982355362,"user":{"displayName":"Fanny F","userId":"11831095778884674749"},"user_tz":-420},"id":"PL4Yjfs0LKNe","outputId":"1a17517c-7a3a-48e4-e72d-f9419ab4b8b9"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["generation biomass                             0.083288\n","generation fossil brown coal/lignite           0.280461\n","generation fossil coal-derived gas                  NaN\n","generation fossil gas                          0.548913\n","generation fossil hard coal                    0.396564\n","generation fossil oil                          0.497089\n","generation fossil oil shale                         NaN\n","generation fossil peat                              NaN\n","generation geothermal                               NaN\n","generation hydro pumped storage aggregated          NaN\n","generation hydro pumped storage consumption   -0.562809\n","generation hydro run-of-river and poundage     0.118570\n","generation hydro water reservoir               0.479481\n","generation marine                                   NaN\n","generation nuclear                             0.085664\n","generation other                               0.100690\n","generation other renewable                     0.181714\n","generation solar                               0.396189\n","generation waste                               0.077312\n","generation wind offshore                            NaN\n","generation wind onshore                        0.040080\n","forecast solar day ahead                       0.404362\n","forecast wind offshore eday ahead                   NaN\n","forecast wind onshore day ahead                0.037597\n","total load forecast                            0.995139\n","total load actual                              1.000000\n","price day ahead                                0.473869\n","price actual                                   0.436127\n","Name: total load actual, dtype: float64"]},"metadata":{},"execution_count":8}],"source":["# Correlation matrix\n","df.corr()['total load actual']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VIBrAzDtN04o"},"outputs":[],"source":["# All\n","# df = df.drop(['generation hydro pumped storage aggregated', 'forecast wind offshore eday ahead', 'total load forecast', 'price day ahead'], axis=1)\n","\n","# No Minus / NaN\n","# df = df.drop(df.columns[[3, 7, 8, 9, 10, 11, 14, 20, 23, 25, 27]], axis=1)\n","\n","# Top 5\n","df = df.drop(['generation biomass', 'generation fossil brown coal/lignite', 'generation fossil coal-derived gas', 'generation fossil hard coal','generation fossil oil shale',\n","'generation fossil peat',                            \n","'generation geothermal' ,                            \n","'generation hydro pumped storage aggregated',     \n","'generation hydro pumped storage consumption',       \n","'generation hydro run-of-river and poundage',                         \n","'generation marine',                                 \n","'generation nuclear',                                \n","'generation other',                                  \n","'generation other renewable',                        \n","'generation solar',                                  \n","'generation waste',                                  \n","'generation wind offshore',                         \n","'generation wind onshore',                                                     \n","'forecast wind onshore day ahead', \n","'forecast wind offshore eday ahead',                  \n","'total load forecast',                                                               \n","'price day ahead'], axis=1)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1674982355362,"user":{"displayName":"Fanny F","userId":"11831095778884674749"},"user_tz":-420},"id":"54yHs-hkO5eg","outputId":"b15bcea4-70c8-4c70-e34b-f61f7ea0d607"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 35064 entries, 2015-01-01 00:00:00+01:00 to 2018-12-31 23:00:00+01:00\n","Data columns (total 6 columns):\n"," #   Column                            Non-Null Count  Dtype  \n","---  ------                            --------------  -----  \n"," 0   generation fossil gas             35046 non-null  float64\n"," 1   generation fossil oil             35045 non-null  float64\n"," 2   generation hydro water reservoir  35046 non-null  float64\n"," 3   forecast solar day ahead          35064 non-null  float64\n"," 4   total load actual                 35028 non-null  float64\n"," 5   price actual                      35064 non-null  float64\n","dtypes: float64(6)\n","memory usage: 1.9+ MB\n"]}],"source":["df.info()"]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"id":"NuidKGgVxWo9","executionInfo":{"status":"ok","timestamp":1674983078852,"user_tz":-420,"elapsed":7,"user":{"displayName":"Fanny F","userId":"11831095778884674749"}},"outputId":"ea62a703-808a-462d-bbc7-36945c46587a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                           generation fossil gas  generation fossil oil  \\\n","time                                                                      \n","2015-01-01 00:00:00+01:00                 4844.0                  162.0   \n","2015-01-01 01:00:00+01:00                 5196.0                  158.0   \n","2015-01-01 02:00:00+01:00                 4857.0                  157.0   \n","2015-01-01 03:00:00+01:00                 4314.0                  160.0   \n","2015-01-01 04:00:00+01:00                 4130.0                  156.0   \n","\n","                           generation hydro water reservoir  \\\n","time                                                          \n","2015-01-01 00:00:00+01:00                            1899.0   \n","2015-01-01 01:00:00+01:00                            1658.0   \n","2015-01-01 02:00:00+01:00                            1371.0   \n","2015-01-01 03:00:00+01:00                             779.0   \n","2015-01-01 04:00:00+01:00                             720.0   \n","\n","                           forecast solar day ahead  total load actual  \\\n","time                                                                     \n","2015-01-01 00:00:00+01:00                      17.0            25385.0   \n","2015-01-01 01:00:00+01:00                      16.0            24382.0   \n","2015-01-01 02:00:00+01:00                       8.0            22734.0   \n","2015-01-01 03:00:00+01:00                       2.0            21286.0   \n","2015-01-01 04:00:00+01:00                       9.0            20264.0   \n","\n","                           price actual  \n","time                                     \n","2015-01-01 00:00:00+01:00         65.41  \n","2015-01-01 01:00:00+01:00         64.92  \n","2015-01-01 02:00:00+01:00         64.48  \n","2015-01-01 03:00:00+01:00         59.32  \n","2015-01-01 04:00:00+01:00         56.04  "],"text/html":["\n","  <div id=\"df-a7ddf2b5-bf91-4d26-aafd-698108f8be92\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>generation fossil gas</th>\n","      <th>generation fossil oil</th>\n","      <th>generation hydro water reservoir</th>\n","      <th>forecast solar day ahead</th>\n","      <th>total load actual</th>\n","      <th>price actual</th>\n","    </tr>\n","    <tr>\n","      <th>time</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2015-01-01 00:00:00+01:00</th>\n","      <td>4844.0</td>\n","      <td>162.0</td>\n","      <td>1899.0</td>\n","      <td>17.0</td>\n","      <td>25385.0</td>\n","      <td>65.41</td>\n","    </tr>\n","    <tr>\n","      <th>2015-01-01 01:00:00+01:00</th>\n","      <td>5196.0</td>\n","      <td>158.0</td>\n","      <td>1658.0</td>\n","      <td>16.0</td>\n","      <td>24382.0</td>\n","      <td>64.92</td>\n","    </tr>\n","    <tr>\n","      <th>2015-01-01 02:00:00+01:00</th>\n","      <td>4857.0</td>\n","      <td>157.0</td>\n","      <td>1371.0</td>\n","      <td>8.0</td>\n","      <td>22734.0</td>\n","      <td>64.48</td>\n","    </tr>\n","    <tr>\n","      <th>2015-01-01 03:00:00+01:00</th>\n","      <td>4314.0</td>\n","      <td>160.0</td>\n","      <td>779.0</td>\n","      <td>2.0</td>\n","      <td>21286.0</td>\n","      <td>59.32</td>\n","    </tr>\n","    <tr>\n","      <th>2015-01-01 04:00:00+01:00</th>\n","      <td>4130.0</td>\n","      <td>156.0</td>\n","      <td>720.0</td>\n","      <td>9.0</td>\n","      <td>20264.0</td>\n","      <td>56.04</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a7ddf2b5-bf91-4d26-aafd-698108f8be92')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a7ddf2b5-bf91-4d26-aafd-698108f8be92 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a7ddf2b5-bf91-4d26-aafd-698108f8be92');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":28}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"c0psqWJNVRft"},"outputs":[],"source":["values = df.values"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":26,"status":"ok","timestamp":1674982355933,"user":{"displayName":"Fanny F","userId":"11831095778884674749"},"user_tz":-420},"id":"soMaubkmYcyJ","outputId":"604d4b71-efda-4daa-ee3f-5297e2f432ba"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(35064, 6)"]},"metadata":{},"execution_count":12}],"source":["values.shape"]},{"cell_type":"code","source":["values"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2X8eaYI-xQhZ","executionInfo":{"status":"ok","timestamp":1674983105148,"user_tz":-420,"elapsed":3,"user":{"displayName":"Fanny F","userId":"11831095778884674749"}},"outputId":"550bff94-6b7a-40d6-cd7a-a72bbb0bb24f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[4.8440e+03, 1.6200e+02, 1.8990e+03, 1.7000e+01, 2.5385e+04,\n","        6.5410e+01],\n","       [5.1960e+03, 1.5800e+02, 1.6580e+03, 1.6000e+01, 2.4382e+04,\n","        6.4920e+01],\n","       [4.8570e+03, 1.5700e+02, 1.3710e+03, 8.0000e+00, 2.2734e+04,\n","        6.4480e+01],\n","       ...,\n","       [7.0250e+03, 1.6800e+02, 2.8310e+03, 3.6000e+01, 2.8071e+04,\n","        7.4300e+01],\n","       [6.5620e+03, 1.6300e+02, 2.0680e+03, 2.9000e+01, 2.5801e+04,\n","        6.9890e+01],\n","       [6.9260e+03, 1.6300e+02, 1.6860e+03, 2.6000e+01, 2.4455e+04,\n","        6.9880e+01]])"]},"metadata":{},"execution_count":30}]},{"cell_type":"markdown","metadata":{"id":"yTyMklRCMQ03"},"source":["## Normalisasi"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9cElSeg2Yevn"},"outputs":[],"source":["# Normalize\n","scaler = MinMaxScaler(feature_range=(0, 1))\n","scaled = scaler.fit_transform(values)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iXtwJO2wYsPv"},"outputs":[],"source":["#covert to time-series\n","def series_to_supervised(data, n_in=1, n_out=1, dropnan=True):\n","\tn_vars = 1 if type(data) is list else data.shape[1]\n","\tdf = DataFrame(data)\n","\tcols, names = list(), list()\n","\t# input sequence (t-n, ... t-1)\n","\tfor i in range(n_in, 0, -1):\n","\t\tcols.append(df.shift(i))\n","\t\tnames += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]\n","\t# forecast sequence (t, t+1, ... t+n)\n","\tfor i in range(0, n_out):\n","\t\tcols.append(df.shift(-i))\n","\t\tif i == 0:\n","\t\t\tnames += [('var%d(t)' % (j+1)) for j in range(n_vars)]\n","\t\telse:\n","\t\t\tnames += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]\n","\t# put it all together\n","\tagg = concat(cols, axis=1)\n","\tagg.columns = names\n","\t# drop rows with NaN values\n","\tif dropnan:\n","\t\tagg.dropna(inplace=True)\n","\treturn agg"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":25,"status":"ok","timestamp":1674982355935,"user":{"displayName":"Fanny F","userId":"11831095778884674749"},"user_tz":-420},"id":"dvpYZCocYwu6","outputId":"d74d7fca-cdbf-4b64-df47-cf00cf138bef"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   var1(t-1)  var2(t-1)  var3(t-1)  var4(t-1)  var5(t-1)  var6(t-1)   var1(t)  \\\n","1   0.241789   0.360802   0.195210   0.002913   0.319666   0.521820  0.259359   \n","2   0.259359   0.351893   0.170436   0.002742   0.276008   0.517261  0.242438   \n","3   0.242438   0.349666   0.140933   0.001371   0.204274   0.513166  0.215334   \n","4   0.215334   0.356347   0.080078   0.000343   0.141247   0.465153  0.206150   \n","5   0.206150   0.347439   0.074013   0.001542   0.096762   0.434633  0.201557   \n","\n","    var2(t)   var3(t)   var4(t)   var5(t)   var6(t)  \n","1  0.351893  0.170436  0.002742  0.276008  0.517261  \n","2  0.349666  0.140933  0.001371  0.204274  0.513166  \n","3  0.356347  0.080078  0.000343  0.141247  0.465153  \n","4  0.347439  0.074013  0.001542  0.096762  0.434633  \n","5  0.347439  0.076377  0.000685  0.081135  0.412208  "],"text/html":["\n","  <div id=\"df-c81dc9be-e49f-4de8-b9c7-47413da5e4c1\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>var1(t-1)</th>\n","      <th>var2(t-1)</th>\n","      <th>var3(t-1)</th>\n","      <th>var4(t-1)</th>\n","      <th>var5(t-1)</th>\n","      <th>var6(t-1)</th>\n","      <th>var1(t)</th>\n","      <th>var2(t)</th>\n","      <th>var3(t)</th>\n","      <th>var4(t)</th>\n","      <th>var5(t)</th>\n","      <th>var6(t)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>0.241789</td>\n","      <td>0.360802</td>\n","      <td>0.195210</td>\n","      <td>0.002913</td>\n","      <td>0.319666</td>\n","      <td>0.521820</td>\n","      <td>0.259359</td>\n","      <td>0.351893</td>\n","      <td>0.170436</td>\n","      <td>0.002742</td>\n","      <td>0.276008</td>\n","      <td>0.517261</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.259359</td>\n","      <td>0.351893</td>\n","      <td>0.170436</td>\n","      <td>0.002742</td>\n","      <td>0.276008</td>\n","      <td>0.517261</td>\n","      <td>0.242438</td>\n","      <td>0.349666</td>\n","      <td>0.140933</td>\n","      <td>0.001371</td>\n","      <td>0.204274</td>\n","      <td>0.513166</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.242438</td>\n","      <td>0.349666</td>\n","      <td>0.140933</td>\n","      <td>0.001371</td>\n","      <td>0.204274</td>\n","      <td>0.513166</td>\n","      <td>0.215334</td>\n","      <td>0.356347</td>\n","      <td>0.080078</td>\n","      <td>0.000343</td>\n","      <td>0.141247</td>\n","      <td>0.465153</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.215334</td>\n","      <td>0.356347</td>\n","      <td>0.080078</td>\n","      <td>0.000343</td>\n","      <td>0.141247</td>\n","      <td>0.465153</td>\n","      <td>0.206150</td>\n","      <td>0.347439</td>\n","      <td>0.074013</td>\n","      <td>0.001542</td>\n","      <td>0.096762</td>\n","      <td>0.434633</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.206150</td>\n","      <td>0.347439</td>\n","      <td>0.074013</td>\n","      <td>0.001542</td>\n","      <td>0.096762</td>\n","      <td>0.434633</td>\n","      <td>0.201557</td>\n","      <td>0.347439</td>\n","      <td>0.076377</td>\n","      <td>0.000685</td>\n","      <td>0.081135</td>\n","      <td>0.412208</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c81dc9be-e49f-4de8-b9c7-47413da5e4c1')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c81dc9be-e49f-4de8-b9c7-47413da5e4c1 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c81dc9be-e49f-4de8-b9c7-47413da5e4c1');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":15}],"source":["reframed = series_to_supervised(scaled, 1, 1)\n","reframed.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":23,"status":"ok","timestamp":1674982355935,"user":{"displayName":"Fanny F","userId":"11831095778884674749"},"user_tz":-420},"id":"dGjrwUYIZOfn","outputId":"32b1b0bd-4dcf-4b81-c7a1-f4170701b469"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(34994, 12)"]},"metadata":{},"execution_count":16}],"source":["reframed.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5rEvPOCeZTYV"},"outputs":[],"source":["reframed.drop(reframed.columns[[-1]], axis=1, inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":22,"status":"ok","timestamp":1674982355936,"user":{"displayName":"Fanny F","userId":"11831095778884674749"},"user_tz":-420},"id":"bLWu1yu7bFVX","outputId":"9b824613-b2aa-4ba5-9c92-3c9ce0436aa1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   var1(t-1)  var2(t-1)  var3(t-1)  var4(t-1)  var5(t-1)  var6(t-1)   var1(t)  \\\n","1   0.241789   0.360802   0.195210   0.002913   0.319666   0.521820  0.259359   \n","2   0.259359   0.351893   0.170436   0.002742   0.276008   0.517261  0.242438   \n","3   0.242438   0.349666   0.140933   0.001371   0.204274   0.513166  0.215334   \n","4   0.215334   0.356347   0.080078   0.000343   0.141247   0.465153  0.206150   \n","5   0.206150   0.347439   0.074013   0.001542   0.096762   0.434633  0.201557   \n","\n","    var2(t)   var3(t)   var4(t)   var5(t)  \n","1  0.351893  0.170436  0.002742  0.276008  \n","2  0.349666  0.140933  0.001371  0.204274  \n","3  0.356347  0.080078  0.000343  0.141247  \n","4  0.347439  0.074013  0.001542  0.096762  \n","5  0.347439  0.076377  0.000685  0.081135  "],"text/html":["\n","  <div id=\"df-9688b211-89f1-41df-aa8b-327ad20b5fcd\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>var1(t-1)</th>\n","      <th>var2(t-1)</th>\n","      <th>var3(t-1)</th>\n","      <th>var4(t-1)</th>\n","      <th>var5(t-1)</th>\n","      <th>var6(t-1)</th>\n","      <th>var1(t)</th>\n","      <th>var2(t)</th>\n","      <th>var3(t)</th>\n","      <th>var4(t)</th>\n","      <th>var5(t)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>0.241789</td>\n","      <td>0.360802</td>\n","      <td>0.195210</td>\n","      <td>0.002913</td>\n","      <td>0.319666</td>\n","      <td>0.521820</td>\n","      <td>0.259359</td>\n","      <td>0.351893</td>\n","      <td>0.170436</td>\n","      <td>0.002742</td>\n","      <td>0.276008</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.259359</td>\n","      <td>0.351893</td>\n","      <td>0.170436</td>\n","      <td>0.002742</td>\n","      <td>0.276008</td>\n","      <td>0.517261</td>\n","      <td>0.242438</td>\n","      <td>0.349666</td>\n","      <td>0.140933</td>\n","      <td>0.001371</td>\n","      <td>0.204274</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.242438</td>\n","      <td>0.349666</td>\n","      <td>0.140933</td>\n","      <td>0.001371</td>\n","      <td>0.204274</td>\n","      <td>0.513166</td>\n","      <td>0.215334</td>\n","      <td>0.356347</td>\n","      <td>0.080078</td>\n","      <td>0.000343</td>\n","      <td>0.141247</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.215334</td>\n","      <td>0.356347</td>\n","      <td>0.080078</td>\n","      <td>0.000343</td>\n","      <td>0.141247</td>\n","      <td>0.465153</td>\n","      <td>0.206150</td>\n","      <td>0.347439</td>\n","      <td>0.074013</td>\n","      <td>0.001542</td>\n","      <td>0.096762</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.206150</td>\n","      <td>0.347439</td>\n","      <td>0.074013</td>\n","      <td>0.001542</td>\n","      <td>0.096762</td>\n","      <td>0.434633</td>\n","      <td>0.201557</td>\n","      <td>0.347439</td>\n","      <td>0.076377</td>\n","      <td>0.000685</td>\n","      <td>0.081135</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9688b211-89f1-41df-aa8b-327ad20b5fcd')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9688b211-89f1-41df-aa8b-327ad20b5fcd button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9688b211-89f1-41df-aa8b-327ad20b5fcd');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":18}],"source":["reframed.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iZETstzDZwuC"},"outputs":[],"source":["# All\n","# reframed.drop(reframed.columns[[x for x in range(24, 46)]], axis=1, inplace=True)\n","\n","# No Minus / NaN\n","# reframed.drop(reframed.columns[[x for x in range(17, 32)]], axis=1, inplace=True)\n","\n","# Top 5\n","reframed.drop(reframed.columns[[x for x in range(6, 10)]], axis=1, inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":21,"status":"ok","timestamp":1674982355937,"user":{"displayName":"Fanny F","userId":"11831095778884674749"},"user_tz":-420},"id":"m9bt9cxiatt8","outputId":"00b05256-c2d4-495b-c8b0-0297f7f70c66"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['var1(t-1)', 'var2(t-1)', 'var3(t-1)', 'var4(t-1)', 'var5(t-1)',\n","       'var6(t-1)', 'var5(t)'],\n","      dtype='object')"]},"metadata":{},"execution_count":20}],"source":["reframed.columns"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PPGNHjAPcCI-"},"outputs":[],"source":["#split into train and test sets\n","values = reframed.values\n","# n_train = round(values.shape[0])\n","\n","train = values[:, :]\n","test = values[:, :]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oBdzzL4VcLuS"},"outputs":[],"source":["#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n","train_X, train_y = train[:, :-1], train[:, -1]\n","test_X, test_y = test[:, :-1], test[:, -1]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":19,"status":"ok","timestamp":1674982355938,"user":{"displayName":"Fanny F","userId":"11831095778884674749"},"user_tz":-420},"id":"lJitGs2MCqAT","outputId":"18334405-c24f-4cbc-dce5-17cc96b378b8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(34994,)"]},"metadata":{},"execution_count":23}],"source":["train_y.shape"]},{"cell_type":"markdown","metadata":{"id":"cqHpNUEE_I8H"},"source":["# Random Search"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8gVKURNu_Myd"},"outputs":[],"source":["from keras.callbacks import EarlyStopping\n","#design network CNN\n","def CNN(optimizer = 'adam',neurons=32,batch_size=32,epochs=50,activation='relu',patience=5,loss='mse'):\n","def CNN(config):\n","  opt, ep, neu, bs = config\n","  #design network CNN\n","  model = Sequential()\n","  model.add(Conv1D(filters=neu, kernel_size=1, activation='relu', input_shape=(train_X.shape[1], train_X.shape[2])))\n","\n","  model.add(MaxPool1D(pool_size=1))\n","  model.add(Dropout(0.2))\n","\n","  model.add(Flatten())\n","\n","  model.add(Dense(64, activation='relu'))\n","  model.add(Dropout(0.2))\n","\n","  model.add(Dense(64, activation='relu'))\n","  model.add(Dropout(0.2))\n","\n","  model.add(Dense(1,activation='relu'))\n","\n","  model.compile(loss='mse', optimizer=opt)\n","\n","  history = model.fit(train_X, train_y, epochs=ep, batch_size=bs, validation_data=(test_X, test_y), verbose=1)\n","\n","  return model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":735,"status":"error","timestamp":1674982356655,"user":{"displayName":"Fanny F","userId":"11831095778884674749"},"user_tz":-420},"id":"zYR4YkEBBFFj","outputId":"12503fad-5fed-4caa-d15f-7e9fc29a75fb"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-25-ce7ee7b7459b>:25: DeprecationWarning: KerasRegressor is deprecated, use Sci-Keras (https://github.com/adriangb/scikeras) instead. See https://www.adriangb.com/scikeras/stable/migration.html for help migrating.\n","  clf = KerasRegressor(build_fn=CNN, verbose=0)\n","/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py:372: FitFailedWarning: \n","30 fits failed out of a total of 30.\n","The score on these train-test partitions for these parameters will be set to nan.\n","If these failures are not expected, you can try to debug them by setting error_score='raise'.\n","\n","Below are more details about the failures:\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_1 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_2 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_3 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_4 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_5 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_6 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_7 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_8 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_9 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_10 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_11 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_12 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_13 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_14 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_15 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_16 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_17 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_18 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_19 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_20 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_21 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_22 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_23 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_24 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_25 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_26 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_27 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_28 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","--------------------------------------------------------------------------------\n","1 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\", line 155, in fit\n","    self.model = self.build_fn(**self.filter_sk_params(self.build_fn))\n","  File \"<ipython-input-24-1d3e40c0276e>\", line 23, in CNN\n","    model.add(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1],)))\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\", line 587, in _method_wrapper\n","    result = method(self, *args, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\", line 212, in add\n","    layer(x)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 668, in __call__\n","    return super(RNN, self).__call__(inputs, **kwargs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 983, in __call__\n","    return self._functional_construction_call(inputs, args, kwargs,\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 1121, in _functional_construction_call\n","    outputs = self._keras_tensor_symbolic_call(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 854, in _keras_tensor_symbolic_call\n","    return self._infer_output_signature(inputs, args, kwargs, input_masks)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 892, in _infer_output_signature\n","    self._maybe_build(inputs)\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 2628, in _maybe_build\n","    input_spec.assert_input_compatibility(\n","  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\", line 215, in assert_input_compatibility\n","    raise ValueError('Input ' + str(input_index) + ' of layer ' +\n","ValueError: Input 0 of layer lstm_29 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)\n","\n","  warnings.warn(some_fits_failed_message, FitFailedWarning)\n","/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_search.py:969: UserWarning: One or more of the test scores are non-finite: [nan nan nan nan nan nan nan nan nan nan]\n","  warnings.warn(\n"]},{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-25-ce7ee7b7459b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0mclf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mKerasRegressor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbuild_fn\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mCNN\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0mRandom\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mRandomizedSearchCV\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_distributions\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrf_params\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mn_iter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mn_iter_search\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mscoring\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'neg_mean_squared_error'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m \u001b[0mRandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_X\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_y\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     28\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mRandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_params_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    924\u001b[0m             \u001b[0mrefit_start_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    925\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0my\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 926\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_estimator_\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    927\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    928\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_estimator_\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/keras/wrappers/scikit_learn.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, **kwargs)\u001b[0m\n\u001b[1;32m    153\u001b[0m           **self.filter_sk_params(self.build_fn.__call__))\n\u001b[1;32m    154\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 155\u001b[0;31m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuild_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilter_sk_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuild_fn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    156\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    157\u001b[0m     if (losses.is_categorical_crossentropy(self.model.loss) and\n","\u001b[0;32m<ipython-input-24-1d3e40c0276e>\u001b[0m in \u001b[0;36mCNN\u001b[0;34m(optimizer, neurons, batch_size, epochs, activation, patience, loss)\u001b[0m\n\u001b[1;32m     21\u001b[0m   \u001b[0;31m#design network LSTM\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m   \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSequential\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 23\u001b[0;31m   \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mLSTM\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mneurons\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreturn_sequences\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_shape\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_X\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     24\u001b[0m   \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mDropout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0.2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/training/tracking/base.py\u001b[0m in \u001b[0;36m_method_wrapper\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    585\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_self_setattr_tracking\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    586\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 587\u001b[0;31m       \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    588\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    589\u001b[0m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_self_setattr_tracking\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprevious_value\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/sequential.py\u001b[0m in \u001b[0;36madd\u001b[0;34m(self, layer)\u001b[0m\n\u001b[1;32m    210\u001b[0m           \u001b[0;31m# and create the node connecting the current layer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    211\u001b[0m           \u001b[0;31m# to the input layer we just created.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 212\u001b[0;31m           \u001b[0mlayer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    213\u001b[0m           \u001b[0mset_inputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    214\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/layers/recurrent.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, inputs, initial_state, constants, **kwargs)\u001b[0m\n\u001b[1;32m    666\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    667\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0minitial_state\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mconstants\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 668\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mRNN\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    669\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    670\u001b[0m     \u001b[0;31m# If any of `initial_state` or `constants` are specified and are Keras\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    981\u001b[0m     \u001b[0;31m# >> model = tf.keras.Model(inputs, outputs)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    982\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0m_in_functional_construction_mode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 983\u001b[0;31m       return self._functional_construction_call(inputs, args, kwargs,\n\u001b[0m\u001b[1;32m    984\u001b[0m                                                 input_list)\n\u001b[1;32m    985\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\u001b[0m in \u001b[0;36m_functional_construction_call\u001b[0;34m(self, inputs, args, kwargs, input_list)\u001b[0m\n\u001b[1;32m   1119\u001b[0m         layer=self, inputs=inputs, build_graph=True, training=training_value):\n\u001b[1;32m   1120\u001b[0m       \u001b[0;31m# Check input assumptions set after layer building, e.g. input shape.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1121\u001b[0;31m       outputs = self._keras_tensor_symbolic_call(\n\u001b[0m\u001b[1;32m   1122\u001b[0m           inputs, input_masks, args, kwargs)\n\u001b[1;32m   1123\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\u001b[0m in \u001b[0;36m_keras_tensor_symbolic_call\u001b[0;34m(self, inputs, input_masks, args, kwargs)\u001b[0m\n\u001b[1;32m    852\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mnest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmap_structure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeras_tensor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mKerasTensor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput_signature\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 854\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_infer_output_signature\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_masks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    855\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    856\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_infer_output_signature\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_masks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\u001b[0m in \u001b[0;36m_infer_output_signature\u001b[0;34m(self, inputs, args, kwargs, input_masks)\u001b[0m\n\u001b[1;32m    890\u001b[0m           \u001b[0;31m# overridden).\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    891\u001b[0m           \u001b[0;31m# TODO(kaftan): do we maybe_build here, or have we already done it?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 892\u001b[0;31m           \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_build\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    893\u001b[0m           \u001b[0minputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_cast_inputs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m           \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcall_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/base_layer.py\u001b[0m in \u001b[0;36m_maybe_build\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m   2626\u001b[0m     \u001b[0;31m# Check input assumptions set before layer building, e.g. input rank.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2627\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuilt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2628\u001b[0;31m       input_spec.assert_input_compatibility(\n\u001b[0m\u001b[1;32m   2629\u001b[0m           self.input_spec, inputs, self.name)\n\u001b[1;32m   2630\u001b[0m       \u001b[0minput_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflatten\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/keras/engine/input_spec.py\u001b[0m in \u001b[0;36massert_input_compatibility\u001b[0;34m(input_spec, inputs, layer_name)\u001b[0m\n\u001b[1;32m    213\u001b[0m       \u001b[0mndim\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mshape\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrank\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    214\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mndim\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mspec\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 215\u001b[0;31m         raise ValueError('Input ' + str(input_index) + ' of layer ' +\n\u001b[0m\u001b[1;32m    216\u001b[0m                          \u001b[0mlayer_name\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m' is incompatible with the layer: '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    217\u001b[0m                          \u001b[0;34m'expected ndim='\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mspec\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m', found ndim='\u001b[0m \u001b[0;34m+\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Input 0 of layer lstm_30 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 6)"]}],"source":["#ANN\n","from keras.wrappers.scikit_learn import KerasRegressor\n","from scipy.stats import randint as sp_randint\n","from random import randrange as sp_randrange\n","from sklearn.model_selection import RandomizedSearchCV\n","# rf_params = {\n","#     'optimizer': ['adam','rmsprop'],\n","#     'activation': ['relu','tanh'],\n","#     'loss': ['mse','mae'],\n","#     'batch_size': [16,32,64],\n","#     'neurons':sp_randint(10,100),\n","#     'epochs':[20,50],\n","#     'patience':sp_randint(3,20)\n","# }\n","rf_params = {\n","    'optimizer': ['adam','rmsprop'],\n","    'activation': ['relu','tanh'],\n","    'loss': ['mse','mae'],\n","    'batch_size': [16,32],\n","    'neurons':[16,32],\n","    'epochs':[20,50],\n","    'patience':[2,5]\n","}\n","n_iter_search=10\n","clf = KerasRegressor(build_fn=CNN, verbose=0)\n","Random = RandomizedSearchCV(clf, param_distributions=rf_params,n_iter=n_iter_search,cv=3,scoring='neg_mean_squared_error')\n","Random.fit(train_X, train_y)\n","print(Random.best_params_)"]}],"metadata":{"colab":{"collapsed_sections":["aPEJqTIAH7EA","DcdMB-LTRIzY","PQeApgHrRN9p"],"provenance":[{"file_id":"1FzPqkCkXLEtayfMXX91Yb5Vpgb_VURdA","timestamp":1674619202931},{"file_id":"1fWljnzXAfRV9Efl8G-DBJf7TKCyah5s1","timestamp":1671607417668}],"authorship_tag":"ABX9TyOGuRyVCruYswGjX+qBKodg"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}