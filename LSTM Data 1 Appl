{"cells":[{"cell_type":"code","execution_count":35,"metadata":{"id":"jXaFFraw7ukU","executionInfo":{"status":"ok","timestamp":1674183955665,"user_tz":-420,"elapsed":12,"user":{"displayName":"King JIN","userId":"03868046888723066623"}}},"outputs":[],"source":["import pandas as pd\n","from pandas import DataFrame\n","from pandas import concat\n","from matplotlib import pyplot\n","from sklearn.preprocessing import MinMaxScaler\n","import time\n","from numpy import concatenate\n","import numpy as np\n","\n","from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import mean_absolute_error\n","from sklearn.metrics import r2_score\n","from tensorflow.python.keras.layers import Dense, LSTM , Dropout\n","from tensorflow.python.keras import Sequential\n","from math import sqrt;\n","import tensorflow as tf"]},{"cell_type":"code","execution_count":36,"metadata":{"id":"JxoRpRi07tJI","colab":{"base_uri":"https://localhost:8080/","height":560},"executionInfo":{"status":"ok","timestamp":1674183957602,"user_tz":-420,"elapsed":1585,"user":{"displayName":"King JIN","userId":"03868046888723066623"}},"outputId":"b2f5b062-8820-44c7-d28f-57556cbc903f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["               date  Appliances  lights     T1       RH_1    T2       RH_2  \\\n","0  11-01-2016 17:00          60      30  19.89  47.596667  19.2  44.790000   \n","1  11-01-2016 17:10          60      30  19.89  46.693333  19.2  44.722500   \n","2  11-01-2016 17:20          50      30  19.89  46.300000  19.2  44.626667   \n","3  11-01-2016 17:30          50      40  19.89  46.066667  19.2  44.590000   \n","4  11-01-2016 17:40          60      40  19.89  46.333333  19.2  44.530000   \n","\n","      T3       RH_3         T4  ...         T9   RH_9  T_out  Press_mm_hg  \\\n","0  19.79  44.730000  19.000000  ...  17.033333  45.53   6.60        733.5   \n","1  19.79  44.790000  19.000000  ...  17.066667  45.56   6.48        733.6   \n","2  19.79  44.933333  18.926667  ...  17.000000  45.50   6.37        733.7   \n","3  19.79  45.000000  18.890000  ...  17.000000  45.40   6.25        733.8   \n","4  19.79  45.000000  18.890000  ...  17.000000  45.40   6.13        733.9   \n","\n","   RH_out  Windspeed  Visibility  Tdewpoint        rv1        rv2  \n","0    92.0   7.000000   63.000000        5.3  13.275433  13.275433  \n","1    92.0   6.666667   59.166667        5.2  18.606195  18.606195  \n","2    92.0   6.333333   55.333333        5.1  28.642668  28.642668  \n","3    92.0   6.000000   51.500000        5.0  45.410390  45.410390  \n","4    92.0   5.666667   47.666667        4.9  10.084097  10.084097  \n","\n","[5 rows x 29 columns]"],"text/html":["\n","  <div id=\"df-bd868abe-2128-4881-ad86-ca7cfe57cb3e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>Appliances</th>\n","      <th>lights</th>\n","      <th>T1</th>\n","      <th>RH_1</th>\n","      <th>T2</th>\n","      <th>RH_2</th>\n","      <th>T3</th>\n","      <th>RH_3</th>\n","      <th>T4</th>\n","      <th>...</th>\n","      <th>T9</th>\n","      <th>RH_9</th>\n","      <th>T_out</th>\n","      <th>Press_mm_hg</th>\n","      <th>RH_out</th>\n","      <th>Windspeed</th>\n","      <th>Visibility</th>\n","      <th>Tdewpoint</th>\n","      <th>rv1</th>\n","      <th>rv2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>11-01-2016 17:00</td>\n","      <td>60</td>\n","      <td>30</td>\n","      <td>19.89</td>\n","      <td>47.596667</td>\n","      <td>19.2</td>\n","      <td>44.790000</td>\n","      <td>19.79</td>\n","      <td>44.730000</td>\n","      <td>19.000000</td>\n","      <td>...</td>\n","      <td>17.033333</td>\n","      <td>45.53</td>\n","      <td>6.60</td>\n","      <td>733.5</td>\n","      <td>92.0</td>\n","      <td>7.000000</td>\n","      <td>63.000000</td>\n","      <td>5.3</td>\n","      <td>13.275433</td>\n","      <td>13.275433</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>11-01-2016 17:10</td>\n","      <td>60</td>\n","      <td>30</td>\n","      <td>19.89</td>\n","      <td>46.693333</td>\n","      <td>19.2</td>\n","      <td>44.722500</td>\n","      <td>19.79</td>\n","      <td>44.790000</td>\n","      <td>19.000000</td>\n","      <td>...</td>\n","      <td>17.066667</td>\n","      <td>45.56</td>\n","      <td>6.48</td>\n","      <td>733.6</td>\n","      <td>92.0</td>\n","      <td>6.666667</td>\n","      <td>59.166667</td>\n","      <td>5.2</td>\n","      <td>18.606195</td>\n","      <td>18.606195</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>11-01-2016 17:20</td>\n","      <td>50</td>\n","      <td>30</td>\n","      <td>19.89</td>\n","      <td>46.300000</td>\n","      <td>19.2</td>\n","      <td>44.626667</td>\n","      <td>19.79</td>\n","      <td>44.933333</td>\n","      <td>18.926667</td>\n","      <td>...</td>\n","      <td>17.000000</td>\n","      <td>45.50</td>\n","      <td>6.37</td>\n","      <td>733.7</td>\n","      <td>92.0</td>\n","      <td>6.333333</td>\n","      <td>55.333333</td>\n","      <td>5.1</td>\n","      <td>28.642668</td>\n","      <td>28.642668</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>11-01-2016 17:30</td>\n","      <td>50</td>\n","      <td>40</td>\n","      <td>19.89</td>\n","      <td>46.066667</td>\n","      <td>19.2</td>\n","      <td>44.590000</td>\n","      <td>19.79</td>\n","      <td>45.000000</td>\n","      <td>18.890000</td>\n","      <td>...</td>\n","      <td>17.000000</td>\n","      <td>45.40</td>\n","      <td>6.25</td>\n","      <td>733.8</td>\n","      <td>92.0</td>\n","      <td>6.000000</td>\n","      <td>51.500000</td>\n","      <td>5.0</td>\n","      <td>45.410390</td>\n","      <td>45.410390</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>11-01-2016 17:40</td>\n","      <td>60</td>\n","      <td>40</td>\n","      <td>19.89</td>\n","      <td>46.333333</td>\n","      <td>19.2</td>\n","      <td>44.530000</td>\n","      <td>19.79</td>\n","      <td>45.000000</td>\n","      <td>18.890000</td>\n","      <td>...</td>\n","      <td>17.000000</td>\n","      <td>45.40</td>\n","      <td>6.13</td>\n","      <td>733.9</td>\n","      <td>92.0</td>\n","      <td>5.666667</td>\n","      <td>47.666667</td>\n","      <td>4.9</td>\n","      <td>10.084097</td>\n","      <td>10.084097</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 29 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bd868abe-2128-4881-ad86-ca7cfe57cb3e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-bd868abe-2128-4881-ad86-ca7cfe57cb3e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-bd868abe-2128-4881-ad86-ca7cfe57cb3e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":36}],"source":["url = \"https://drive.google.com/file/d/1_LBzbPCrkDpksT37LZoIRs8NyeOocCyr/view?usp=share_link\"\n","url='https://drive.google.com/uc?id=' + url.split('/')[-2]\n","df = pd.read_csv(url)\n","df.head()\n","# df = pd.read_csv('/content/energydata_complete.csv', \n","#                  parse_dates={'dt' : ['date']}, infer_datetime_format=True, \n","#                  low_memory=False, na_values=['nan','?'], index_col='dt')"]},{"cell_type":"code","execution_count":37,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":81,"status":"ok","timestamp":1674183957606,"user":{"displayName":"King JIN","userId":"03868046888723066623"},"user_tz":-420},"id":"pKGr_AZtKGhx","outputId":"53da30e2-ce83-44af-fd16-228ce30e45e4"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["date           0\n","Appliances     0\n","lights         0\n","T1             0\n","RH_1           0\n","T2             0\n","RH_2           0\n","T3             0\n","RH_3           0\n","T4             0\n","RH_4           0\n","T5             0\n","RH_5           0\n","T6             0\n","RH_6           0\n","T7             0\n","RH_7           0\n","T8             0\n","RH_8           0\n","T9             0\n","RH_9           0\n","T_out          0\n","Press_mm_hg    0\n","RH_out         0\n","Windspeed      0\n","Visibility     0\n","Tdewpoint      0\n","rv1            0\n","rv2            0\n","dtype: int64"]},"metadata":{},"execution_count":37}],"source":["df.isnull().sum()"]},{"cell_type":"code","execution_count":38,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":73,"status":"ok","timestamp":1674183957607,"user":{"displayName":"King JIN","userId":"03868046888723066623"},"user_tz":-420},"id":"V0AxM3HqMGHB","outputId":"a21a1e13-7b85-4d9a-abe7-a7706d0b3723"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['date', 'Appliances', 'lights', 'T1', 'RH_1', 'T2', 'RH_2', 'T3',\n","       'RH_3', 'T4', 'RH_4', 'T5', 'RH_5', 'T6', 'RH_6', 'T7', 'RH_7', 'T8',\n","       'RH_8', 'T9', 'RH_9', 'T_out', 'Press_mm_hg', 'RH_out', 'Windspeed',\n","       'Visibility', 'Tdewpoint', 'rv1', 'rv2'],\n","      dtype='object')"]},"metadata":{},"execution_count":38}],"source":["df.columns"]},{"cell_type":"code","execution_count":39,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"executionInfo":{"elapsed":69,"status":"ok","timestamp":1674183957608,"user":{"displayName":"King JIN","userId":"03868046888723066623"},"user_tz":-420},"id":"dxffnqAFJ00f","outputId":"b7d0efcd-d8a7-48e6-9380-3f674f79eec3"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 288x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["# Correlations among columns\n","pyplot.matshow(df.corr(method='spearman'),vmax=1,vmin=-1,cmap='PRGn')\n","pyplot.title('without resampling', size=15)\n","pyplot.colorbar()\n","pyplot.show()"]},{"cell_type":"code","source":["df.corr()['Appliances']"],"metadata":{"id":"Tlx7sAsuRRWY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1674183957987,"user_tz":-420,"elapsed":446,"user":{"displayName":"King JIN","userId":"03868046888723066623"}},"outputId":"71aca462-0935-4216-9e4f-50a457b16ddc"},"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Appliances     1.000000\n","lights         0.197278\n","T1             0.055447\n","RH_1           0.086031\n","T2             0.120073\n","RH_2          -0.060465\n","T3             0.085060\n","RH_3           0.036292\n","T4             0.040281\n","RH_4           0.016965\n","T5             0.019760\n","RH_5           0.006955\n","T6             0.117638\n","RH_6          -0.083178\n","T7             0.025801\n","RH_7          -0.055642\n","T8             0.039572\n","RH_8          -0.094039\n","T9             0.010010\n","RH_9          -0.051462\n","T_out          0.099155\n","Press_mm_hg   -0.034885\n","RH_out        -0.152282\n","Windspeed      0.087122\n","Visibility     0.000230\n","Tdewpoint      0.015357\n","rv1           -0.011145\n","rv2           -0.011145\n","Name: Appliances, dtype: float64"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","execution_count":41,"metadata":{"id":"vhFAw8k38Xi3","executionInfo":{"status":"ok","timestamp":1674183957992,"user_tz":-420,"elapsed":73,"user":{"displayName":"King JIN","userId":"03868046888723066623"}}},"outputs":[],"source":["df_new = df.drop(df.columns[[0, 6, 14, 16, 18, 20, 21, 22, 27, 28]], axis=1)\n","#df_5 = df.drop(df.columns[[0, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28]], axis=1)\n","#df_new = df.drop(df.columns[['RH_2', 'RH_6', 'RH_7', 'RH_8', 'RH_9', 'Press_mm_hg', 'RH_out', 'rv1', 'rv2']], axis=1)"]},{"cell_type":"code","execution_count":42,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":74,"status":"ok","timestamp":1674183957994,"user":{"displayName":"King JIN","userId":"03868046888723066623"},"user_tz":-420},"id":"ynUaIE0KNvWW","outputId":"d71c5531-ba03-4ad8-ad09-dd883bc50c84"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['date', 'Appliances', 'lights', 'T1', 'RH_1', 'T2', 'RH_2', 'T3',\n","       'RH_3', 'T4', 'RH_4', 'T5', 'RH_5', 'T6', 'RH_6', 'T7', 'RH_7', 'T8',\n","       'RH_8', 'T9', 'RH_9', 'T_out', 'Press_mm_hg', 'RH_out', 'Windspeed',\n","       'Visibility', 'Tdewpoint', 'rv1', 'rv2'],\n","      dtype='object')"]},"metadata":{},"execution_count":42}],"source":["df.columns"]},{"cell_type":"code","execution_count":43,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"executionInfo":{"elapsed":70,"status":"ok","timestamp":1674183957996,"user":{"displayName":"King JIN","userId":"03868046888723066623"},"user_tz":-420},"id":"CnV0Dyq3NmvW","outputId":"71705120-d435-4a1a-9fb7-5303a5493735"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 288x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["# Correlations among columns\n","pyplot.matshow(df_new.corr(method='spearman'),vmax=1,vmin=-1,cmap='PRGn')\n","pyplot.title('without resampling', size=15)\n","pyplot.colorbar()\n","pyplot.show()"]},{"cell_type":"code","source":["df_new = df"],"metadata":{"id":"rR1fNUYGlP0I","executionInfo":{"status":"ok","timestamp":1674183957999,"user_tz":-420,"elapsed":71,"user":{"displayName":"King JIN","userId":"03868046888723066623"}}},"execution_count":44,"outputs":[]},{"cell_type":"code","execution_count":45,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":560},"executionInfo":{"elapsed":71,"status":"ok","timestamp":1674183958000,"user":{"displayName":"King JIN","userId":"03868046888723066623"},"user_tz":-420},"id":"wH9YaEqG8fNs","outputId":"8254d1d7-8f10-4f8f-e421-2f174d5abae2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["               date  Appliances  lights     T1       RH_1    T2       RH_2  \\\n","0  11-01-2016 17:00          60      30  19.89  47.596667  19.2  44.790000   \n","1  11-01-2016 17:10          60      30  19.89  46.693333  19.2  44.722500   \n","2  11-01-2016 17:20          50      30  19.89  46.300000  19.2  44.626667   \n","3  11-01-2016 17:30          50      40  19.89  46.066667  19.2  44.590000   \n","4  11-01-2016 17:40          60      40  19.89  46.333333  19.2  44.530000   \n","\n","      T3       RH_3         T4  ...         T9   RH_9  T_out  Press_mm_hg  \\\n","0  19.79  44.730000  19.000000  ...  17.033333  45.53   6.60        733.5   \n","1  19.79  44.790000  19.000000  ...  17.066667  45.56   6.48        733.6   \n","2  19.79  44.933333  18.926667  ...  17.000000  45.50   6.37        733.7   \n","3  19.79  45.000000  18.890000  ...  17.000000  45.40   6.25        733.8   \n","4  19.79  45.000000  18.890000  ...  17.000000  45.40   6.13        733.9   \n","\n","   RH_out  Windspeed  Visibility  Tdewpoint        rv1        rv2  \n","0    92.0   7.000000   63.000000        5.3  13.275433  13.275433  \n","1    92.0   6.666667   59.166667        5.2  18.606195  18.606195  \n","2    92.0   6.333333   55.333333        5.1  28.642668  28.642668  \n","3    92.0   6.000000   51.500000        5.0  45.410390  45.410390  \n","4    92.0   5.666667   47.666667        4.9  10.084097  10.084097  \n","\n","[5 rows x 29 columns]"],"text/html":["\n","  <div id=\"df-fef380d5-da0e-4384-8348-a749560ac08b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>Appliances</th>\n","      <th>lights</th>\n","      <th>T1</th>\n","      <th>RH_1</th>\n","      <th>T2</th>\n","      <th>RH_2</th>\n","      <th>T3</th>\n","      <th>RH_3</th>\n","      <th>T4</th>\n","      <th>...</th>\n","      <th>T9</th>\n","      <th>RH_9</th>\n","      <th>T_out</th>\n","      <th>Press_mm_hg</th>\n","      <th>RH_out</th>\n","      <th>Windspeed</th>\n","      <th>Visibility</th>\n","      <th>Tdewpoint</th>\n","      <th>rv1</th>\n","      <th>rv2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>11-01-2016 17:00</td>\n","      <td>60</td>\n","      <td>30</td>\n","      <td>19.89</td>\n","      <td>47.596667</td>\n","      <td>19.2</td>\n","      <td>44.790000</td>\n","      <td>19.79</td>\n","      <td>44.730000</td>\n","      <td>19.000000</td>\n","      <td>...</td>\n","      <td>17.033333</td>\n","      <td>45.53</td>\n","      <td>6.60</td>\n","      <td>733.5</td>\n","      <td>92.0</td>\n","      <td>7.000000</td>\n","      <td>63.000000</td>\n","      <td>5.3</td>\n","      <td>13.275433</td>\n","      <td>13.275433</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>11-01-2016 17:10</td>\n","      <td>60</td>\n","      <td>30</td>\n","      <td>19.89</td>\n","      <td>46.693333</td>\n","      <td>19.2</td>\n","      <td>44.722500</td>\n","      <td>19.79</td>\n","      <td>44.790000</td>\n","      <td>19.000000</td>\n","      <td>...</td>\n","      <td>17.066667</td>\n","      <td>45.56</td>\n","      <td>6.48</td>\n","      <td>733.6</td>\n","      <td>92.0</td>\n","      <td>6.666667</td>\n","      <td>59.166667</td>\n","      <td>5.2</td>\n","      <td>18.606195</td>\n","      <td>18.606195</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>11-01-2016 17:20</td>\n","      <td>50</td>\n","      <td>30</td>\n","      <td>19.89</td>\n","      <td>46.300000</td>\n","      <td>19.2</td>\n","      <td>44.626667</td>\n","      <td>19.79</td>\n","      <td>44.933333</td>\n","      <td>18.926667</td>\n","      <td>...</td>\n","      <td>17.000000</td>\n","      <td>45.50</td>\n","      <td>6.37</td>\n","      <td>733.7</td>\n","      <td>92.0</td>\n","      <td>6.333333</td>\n","      <td>55.333333</td>\n","      <td>5.1</td>\n","      <td>28.642668</td>\n","      <td>28.642668</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>11-01-2016 17:30</td>\n","      <td>50</td>\n","      <td>40</td>\n","      <td>19.89</td>\n","      <td>46.066667</td>\n","      <td>19.2</td>\n","      <td>44.590000</td>\n","      <td>19.79</td>\n","      <td>45.000000</td>\n","      <td>18.890000</td>\n","      <td>...</td>\n","      <td>17.000000</td>\n","      <td>45.40</td>\n","      <td>6.25</td>\n","      <td>733.8</td>\n","      <td>92.0</td>\n","      <td>6.000000</td>\n","      <td>51.500000</td>\n","      <td>5.0</td>\n","      <td>45.410390</td>\n","      <td>45.410390</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>11-01-2016 17:40</td>\n","      <td>60</td>\n","      <td>40</td>\n","      <td>19.89</td>\n","      <td>46.333333</td>\n","      <td>19.2</td>\n","      <td>44.530000</td>\n","      <td>19.79</td>\n","      <td>45.000000</td>\n","      <td>18.890000</td>\n","      <td>...</td>\n","      <td>17.000000</td>\n","      <td>45.40</td>\n","      <td>6.13</td>\n","      <td>733.9</td>\n","      <td>92.0</td>\n","      <td>5.666667</td>\n","      <td>47.666667</td>\n","      <td>4.9</td>\n","      <td>10.084097</td>\n","      <td>10.084097</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 29 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fef380d5-da0e-4384-8348-a749560ac08b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-fef380d5-da0e-4384-8348-a749560ac08b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-fef380d5-da0e-4384-8348-a749560ac08b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":45}],"source":["df_new.head()"]},{"cell_type":"code","execution_count":46,"metadata":{"id":"oqVbhCjh9wPl","executionInfo":{"status":"ok","timestamp":1674183958001,"user_tz":-420,"elapsed":69,"user":{"displayName":"King JIN","userId":"03868046888723066623"}}},"outputs":[],"source":["values = df_new.values"]},{"cell_type":"code","execution_count":47,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":68,"status":"ok","timestamp":1674183958002,"user":{"displayName":"King JIN","userId":"03868046888723066623"},"user_tz":-420},"id":"kv0fRTTaN2n7","outputId":"56ccdb89-8d46-4045-d1b4-9e46f6f3cd9c"},"outputs":[{"output_type":"stream","name":"stdout","text":["[['11-01-2016 17:00' 60 30 ... 5.3 13.27543316 13.27543316]\n"," ['11-01-2016 17:10' 60 30 ... 5.2 18.60619498 18.60619498]\n"," ['11-01-2016 17:20' 50 30 ... 5.1 28.64266817 28.64266817]\n"," ...\n"," ['27-05-2016 17:40' 270 10 ... 13.3 29.19911708 29.19911708]\n"," ['27-05-2016 17:50' 420 10 ... 13.2 6.322783651 6.322783651]\n"," ['27-05-2016 18:00' 430 10 ... 13.2 34.11885059 34.11885059]]\n"]}],"source":["print(values)"]},{"cell_type":"code","execution_count":48,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":380},"executionInfo":{"elapsed":115635,"status":"error","timestamp":1674184073577,"user":{"displayName":"King JIN","userId":"03868046888723066623"},"user_tz":-420},"id":"uG0_jaXB-AMB","outputId":"d5ba2eb7-e5f4-4f66-d29f-1ab0424621c7"},"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-48-0c63e525a271>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      9\u001b[0m         \u001b[0mpyplot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf_new\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mgroup\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'right'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m         \u001b[0mi\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0mpyplot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mshow\u001b[0;34m(*args, **kw)\u001b[0m\n\u001b[1;32m    270\u001b[0m     \"\"\"\n\u001b[1;32m    271\u001b[0m     \u001b[0;32mglobal\u001b[0m \u001b[0m_show\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 272\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_show\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    273\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    274\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/ipykernel/pylab/backend_inline.py\u001b[0m in \u001b[0;36mshow\u001b[0;34m(close, block)\u001b[0m\n\u001b[1;32m     39\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mfigure_manager\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mGcf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_all_fig_managers\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m             display(\n\u001b[0m\u001b[1;32m     42\u001b[0m                 \u001b[0mfigure_manager\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m                 \u001b[0mmetadata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_fetch_figure_metadata\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigure_manager\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/IPython/core/display.py\u001b[0m in \u001b[0;36mdisplay\u001b[0;34m(include, exclude, metadata, transient, display_id, *objs, **kwargs)\u001b[0m\n\u001b[1;32m    311\u001b[0m             \u001b[0mpublish_display_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetadata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmetadata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    312\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 313\u001b[0;31m             \u001b[0mformat_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmd_dict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minclude\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minclude\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexclude\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mexclude\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    314\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mformat_dict\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    315\u001b[0m                 \u001b[0;31m# nothing to display (e.g. _ipython_display_ took over)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36mformat\u001b[0;34m(self, obj, include, exclude)\u001b[0m\n\u001b[1;32m    178\u001b[0m             \u001b[0mmd\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    179\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 180\u001b[0;31m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mformatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    181\u001b[0m             \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    182\u001b[0m                 \u001b[0;31m# FIXME: log the exception\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<decorator-gen-2>\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, obj)\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36mcatch_format_error\u001b[0;34m(method, self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    222\u001b[0m     \u001b[0;34m\"\"\"show traceback on failed format call\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    223\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 224\u001b[0;31m         \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    225\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    226\u001b[0m         \u001b[0;31m# don't warn on NotImplementedErrors\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, obj)\u001b[0m\n\u001b[1;32m    339\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    340\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 341\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mprinter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    342\u001b[0m             \u001b[0;31m# Finally look for special method names\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    343\u001b[0m             \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_real_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_method\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/IPython/core/pylabtools.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(fig)\u001b[0m\n\u001b[1;32m    242\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    243\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m'png'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 244\u001b[0;31m         \u001b[0mpng_formatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfor_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'png'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    245\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m'retina'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m'png2x'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    246\u001b[0m         \u001b[0mpng_formatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfor_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mretina_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/IPython/core/pylabtools.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(fig, fmt, bbox_inches, **kwargs)\u001b[0m\n\u001b[1;32m    126\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    127\u001b[0m     \u001b[0mbytes_io\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mBytesIO\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 128\u001b[0;31m     \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbytes_io\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    129\u001b[0m     \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbytes_io\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetvalue\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfmt\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'svg'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/matplotlib/backend_bases.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, **kwargs)\u001b[0m\n\u001b[1;32m   2100\u001b[0m                         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2101\u001b[0m                     \u001b[0mbbox_artists\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"bbox_extra_artists\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2102\u001b[0;31m                     bbox_inches = self.figure.get_tightbbox(renderer,\n\u001b[0m\u001b[1;32m   2103\u001b[0m                             bbox_extra_artists=bbox_artists)\n\u001b[1;32m   2104\u001b[0m                     \u001b[0mpad\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"pad_inches\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/matplotlib/figure.py\u001b[0m in \u001b[0;36mget_tightbbox\u001b[0;34m(self, renderer, bbox_extra_artists)\u001b[0m\n\u001b[1;32m   2392\u001b[0m                 \u001b[0;31m# need this conditional....\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2393\u001b[0m                 \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2394\u001b[0;31m                     bbox = ax.get_tightbbox(renderer,\n\u001b[0m\u001b[1;32m   2395\u001b[0m                             bbox_extra_artists=bbox_extra_artists)\n\u001b[1;32m   2396\u001b[0m                 \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36mget_tightbbox\u001b[0;34m(self, renderer, call_axes_locator, bbox_extra_artists)\u001b[0m\n\u001b[1;32m   4325\u001b[0m                 \u001b[0mbb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbb_xaxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4326\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4327\u001b[0;31m             \u001b[0mbb_yaxis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0myaxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_tightbbox\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4328\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbb_yaxis\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4329\u001b[0m                 \u001b[0mbb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbb_yaxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36mget_tightbbox\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m   1186\u001b[0m         \u001b[0mticks_to_draw\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_update_ticks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1187\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1188\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_update_label_position\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1189\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1190\u001b[0m         \u001b[0;31m# go back to just this axis's tick labels\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36m_update_label_position\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m   2311\u001b[0m         \u001b[0;31m# get bounding boxes for this axis and any siblings\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2312\u001b[0m         \u001b[0;31m# that have been set by `fig.align_ylabels()`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2313\u001b[0;31m         \u001b[0mbboxes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbboxes2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_tick_boxes_siblings\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2314\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2315\u001b[0m         \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_position\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36m_get_tick_boxes_siblings\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m   2296\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0maxx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mgrp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_siblings\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2297\u001b[0m             \u001b[0mticks_to_draw\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0myaxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_update_ticks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2298\u001b[0;31m             \u001b[0mtlb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtlb2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0myaxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_tick_bboxes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mticks_to_draw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2299\u001b[0m             \u001b[0mbboxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtlb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2300\u001b[0m             \u001b[0mbboxes2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtlb2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36m_get_tick_bboxes\u001b[0;34m(self, ticks, renderer)\u001b[0m\n\u001b[1;32m   1171\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_tick_bboxes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mticks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1172\u001b[0m         \u001b[0;34m\"\"\"Return lists of bboxes for ticks' label1's and label2's.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1173\u001b[0;31m         return ([tick.label1.get_window_extent(renderer)\n\u001b[0m\u001b[1;32m   1174\u001b[0m                  for tick in ticks if tick.label1.get_visible()],\n\u001b[1;32m   1175\u001b[0m                 [tick.label2.get_window_extent(renderer)\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m   1171\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_tick_bboxes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mticks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1172\u001b[0m         \u001b[0;34m\"\"\"Return lists of bboxes for ticks' label1's and label2's.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1173\u001b[0;31m         return ([tick.label1.get_window_extent(renderer)\n\u001b[0m\u001b[1;32m   1174\u001b[0m                  for tick in ticks if tick.label1.get_visible()],\n\u001b[1;32m   1175\u001b[0m                 [tick.label2.get_window_extent(renderer)\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/matplotlib/text.py\u001b[0m in \u001b[0;36mget_window_extent\u001b[0;34m(self, renderer, dpi)\u001b[0m\n\u001b[1;32m    903\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mRuntimeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Cannot get window extent w/o renderer'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    904\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 905\u001b[0;31m         \u001b[0mbbox\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minfo\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdescent\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_layout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_renderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    906\u001b[0m         \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_unitless_position\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    907\u001b[0m         \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/matplotlib/text.py\u001b[0m in \u001b[0;36m_get_layout\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m    297\u001b[0m             \u001b[0mclean_line\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mismath\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_preprocess_math\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    298\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mclean_line\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 299\u001b[0;31m                 w, h, d = renderer.get_text_width_height_descent(\n\u001b[0m\u001b[1;32m    300\u001b[0m                     clean_line, self._fontproperties, ismath=ismath)\n\u001b[1;32m    301\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/matplotlib/backends/backend_agg.py\u001b[0m in \u001b[0;36mget_text_width_height_descent\u001b[0;34m(self, s, prop, ismath)\u001b[0m\n\u001b[1;32m    212\u001b[0m         \u001b[0mflags\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_hinting_flag\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    213\u001b[0m         \u001b[0mfont\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_agg_font\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprop\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 214\u001b[0;31m         \u001b[0mfont\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_text\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mflags\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    215\u001b[0m         \u001b[0mw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mh\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfont\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_width_height\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# width and height of unrotated string\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    216\u001b[0m         \u001b[0md\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfont\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_descent\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["groups = [0, 12]\n","#groups = [0, 1, 2, 3]\n","i = 1\n","# plot each column\n","pyplot.figure()\n","for group in groups:\n","\tpyplot.subplot(len(groups), 1, i)\n","\tpyplot.plot(values[:, group])\n","\tpyplot.title(df_new.columns[group], y=0.5, loc='right')\n","\ti += 1\n","pyplot.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":96,"status":"aborted","timestamp":1674184073603,"user":{"displayName":"King JIN","userId":"03868046888723066623"},"user_tz":-420},"id":"CaohGbf5-Wsb"},"outputs":[],"source":["values.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":96,"status":"aborted","timestamp":1674184073605,"user":{"displayName":"King JIN","userId":"03868046888723066623"},"user_tz":-420},"id":"7aveu5NJ-a0C"},"outputs":[],"source":["values.dtype"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Cv4TjbBm-VzD","executionInfo":{"status":"aborted","timestamp":1674184073606,"user_tz":-420,"elapsed":97,"user":{"displayName":"King JIN","userId":"03868046888723066623"}}},"outputs":[],"source":["scaler = MinMaxScaler(feature_range=(0, 1))\n","# scaledMin = scaler.fit_transform(valuesMin)\n","scaled = scaler.fit_transform(values)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-eALs7iY-pb_","executionInfo":{"status":"aborted","timestamp":1674184073606,"user_tz":-420,"elapsed":97,"user":{"displayName":"King JIN","userId":"03868046888723066623"}}},"outputs":[],"source":["#covert to time-series\n","def series_to_supervised(data, n_in=1, n_out=1, dropnan=True):\n","\tn_vars = 1 if type(data) is list else data.shape[1]\n","\tdf = DataFrame(data)\n","\tcols, names = list(), list()\n","\t# input sequence (t-n, ... t-1)\n","\tfor i in range(n_in, 0, -1):\n","\t\tcols.append(df.shift(i))\n","\t\tnames += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]\n","\t# forecast sequence (t, t+1, ... t+n)\n","\tfor i in range(0, n_out):\n","\t\tcols.append(df.shift(-i))\n","\t\tif i == 0:\n","\t\t\tnames += [('var%d(t)' % (j+1)) for j in range(n_vars)]\n","\t\telse:\n","\t\t\tnames += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]\n","\t# put it all together\n","\tagg = concat(cols, axis=1)\n","\tagg.columns = names\n","\t# drop rows with NaN values\n","\tif dropnan:\n","\t\tagg.dropna(inplace=True)\n","\treturn agg"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"b_ktenum_Aa2","executionInfo":{"status":"aborted","timestamp":1674184073641,"user_tz":-420,"elapsed":132,"user":{"displayName":"King JIN","userId":"03868046888723066623"}}},"outputs":[],"source":["# reframedMin = series_to_supervised(scaledMin, 1, 1)\n","reframed = series_to_supervised(scaled, 1, 1)\n","# reframed.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":133,"status":"aborted","timestamp":1674184073642,"user":{"displayName":"King JIN","userId":"03868046888723066623"},"user_tz":-420},"id":"OQ057r3q_o6n"},"outputs":[],"source":["reframed.shape"]},{"cell_type":"code","source":["a = [x for x in range(24, 47)]\n","a"],"metadata":{"id":"sXndEf6zGP8f","executionInfo":{"status":"aborted","timestamp":1674184073643,"user_tz":-420,"elapsed":133,"user":{"displayName":"King JIN","userId":"03868046888723066623"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qRhlfu-ykPXC","executionInfo":{"status":"aborted","timestamp":1674184073643,"user_tz":-420,"elapsed":133,"user":{"displayName":"King JIN","userId":"03868046888723066623"}}},"outputs":[],"source":["# reframed.drop(reframedMin.columns[[x for x in range(22, reframedMin.shape[1])]], axis=1, inplace=True)\n","reframed.drop(reframed.columns[[x for x in range(29, reframed.shape[1])]], axis=1, inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":133,"status":"aborted","timestamp":1674184073644,"user":{"displayName":"King JIN","userId":"03868046888723066623"},"user_tz":-420},"id":"iOxUvsNQkVBk"},"outputs":[],"source":["reframed.head()"]},{"cell_type":"code","source":["reframed.shape"],"metadata":{"id":"iif4DbI-tPEK","executionInfo":{"status":"aborted","timestamp":1674184073645,"user_tz":-420,"elapsed":133,"user":{"displayName":"King JIN","userId":"03868046888723066623"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7yAu3jbi_1eE","executionInfo":{"status":"aborted","timestamp":1674184073646,"user_tz":-420,"elapsed":134,"user":{"displayName":"King JIN","userId":"03868046888723066623"}}},"outputs":[],"source":["#split into train and test sets\n","values = reframed.values\n","# values5 = reframed5.values\n","n_train = round(values.shape[0])\n","\n","train = values[:, :]\n","test = values[:, :]\n","# train5 = values5[:n_train, :]\n","# test5 = values5[n_train:, :]"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":134,"status":"aborted","timestamp":1674184073646,"user":{"displayName":"King JIN","userId":"03868046888723066623"},"user_tz":-420},"id":"fAa5HcAaAMkf"},"outputs":[],"source":["print(values)\n","print('=====')\n","print(n_train)\n","print('=====')\n","print(train)\n","print('=====')\n","print(test)"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":134,"status":"aborted","timestamp":1674184073647,"user":{"displayName":"King JIN","userId":"03868046888723066623"},"user_tz":-420},"id":"E490pvE_ATS3"},"outputs":[],"source":["#split into input and outputs\n","train_X, train_y = train[:, :-1], train[:, -1]\n","test_X, test_y = test[:, :-1], test[:, -1]\n","\n","print(train_X)\n","print('==========================')\n","print(train_y)\n","print('==========================')\n","print(test_X)\n","print('==========================')\n","print(test_y)"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":135,"status":"aborted","timestamp":1674184073648,"user":{"displayName":"King JIN","userId":"03868046888723066623"},"user_tz":-420},"id":"gQUbNI9aAvXM"},"outputs":[],"source":["#reshap input menjadi 3D ([)samples, timesteps, features)\n","train_X = train_X.reshape((train_X.shape[0], 1, train_X.shape[1]))\n","test_X = test_X.reshape((test_X.shape[0], 1, test_X.shape[1]))\n","print(train_X)\n","print('==========================')\n","print(test_X)\n","print('==========================')\n","print(train_X.shape, train_y.shape, test_X.shape, test_y.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2__qjgRjA_ND","executionInfo":{"status":"aborted","timestamp":1674184073650,"user_tz":-420,"elapsed":136,"user":{"displayName":"King JIN","userId":"03868046888723066623"}}},"outputs":[],"source":["#design network LSTM\n","model = Sequential()\n","model.add(LSTM(32, return_sequences = True, input_shape=(train_X.shape[1], train_X.shape[2])))\n","model.add(Dropout(0.2))\n","\n","model.add(LSTM(units = 64, return_sequences = True))\n","model.add(Dropout(0.2))\n","\n","model.add(LSTM(units = 64, return_sequences = True))\n","model.add(Dropout(0.2))\n","\n","model.add(LSTM(units = 64))\n","model.add(Dropout(0.2))\n","\n","model.add(Dense(1, activation='linear'))\n","\n","model.compile(loss='mse', optimizer='adam')"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":136,"status":"aborted","timestamp":1674184073652,"user":{"displayName":"King JIN","userId":"03868046888723066623"},"user_tz":-420},"id":"ii_t2F3sBSIM"},"outputs":[],"source":["model.summary()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":137,"status":"aborted","timestamp":1674184073653,"user":{"displayName":"King JIN","userId":"03868046888723066623"},"user_tz":-420},"id":"fA1b9-BBBifX"},"outputs":[],"source":["#fit network\n","start = time.time()\n","history = model.fit(train_X, train_y, epochs=5, batch_size=128, validation_data=(test_X, test_y), verbose=1, shuffle=False)\n","end = time.time()\n","print('Processing Time {} seconds.'.format(end-start))"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":137,"status":"aborted","timestamp":1674184073654,"user":{"displayName":"King JIN","userId":"03868046888723066623"},"user_tz":-420},"id":"5FnBhsmWDVDy"},"outputs":[],"source":["#plot history\n","pyplot.plot(history.history['loss'], label='train')\n","pyplot.plot(history.history['val_loss'], label='test')\n","pyplot.xlabel('Epoch')\n","pyplot.ylabel('Loss')\n","pyplot.legend()\n","pyplot.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":141,"status":"aborted","timestamp":1674184073658,"user":{"displayName":"King JIN","userId":"03868046888723066623"},"user_tz":-420},"id":"pwd_q_9fJEPl"},"outputs":[],"source":["train_X.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":142,"status":"aborted","timestamp":1674184073660,"user":{"displayName":"King JIN","userId":"03868046888723066623"},"user_tz":-420},"id":"7IVUqh-4Ekpm"},"outputs":[],"source":["#membuat prediksi training\n","xhat = model.predict(train_X)\n","print(xhat)\n","train_X = train_X.reshape((train_X.shape[0], train_X.shape[2]))\n","print('========================================================\\n', train_X)\n","train_y = train_y.reshape((len(train_y), 1))\n","print('========================================================\\n', train_y)\n","\n","# make a prediction test\n","yhat = model.predict(test_X)\n","print(yhat)\n","test_X = test_X.reshape((test_X.shape[0], test_X.shape[2]))\n","print('========================================================\\n', test_X)\n","test_y = test_y.reshape((len(test_y), 1))\n","print('========================================================\\n', test_y)"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":143,"status":"aborted","timestamp":1674184073661,"user":{"displayName":"King JIN","userId":"03868046888723066623"},"user_tz":-420},"id":"S-3MCAwSsK6w"},"outputs":[],"source":["# calculate RMSE\n","rmsetrain = np.sqrt(mean_squared_error(xhat, train_y))\n","print(f'RMSE Training is : %.3f' % rmsetrain)\n","# rmsetrain = np.sqrt(mean_squared_error(inv_x, inv_xhat))\n","# print(f'RMSE Training is : %.3f' % rmsetrain)\n","\n","rmsetest = np.sqrt(mean_squared_error(test_y, yhat))\n","print(f'RMSE Testing is : %.3f' % rmsetest)\n","# rmsetest = np.sqrt(mean_squared_error(inv_y, inv_yhat))\n","# print(f'RMSE Testing is : %.3f' % rmsetest)\n","\n","\n","def mean_absolute_percentage_error(yhat, test_y):\n","    yhat, test_y = np.array(yhat), np.array(test_y)\n","    return np.mean(np.abs((yhat, test_y) / test_y))\n","\n","print(f'MAPE train is : {(mean_absolute_percentage_error(train_y, xhat))}')\n","# print(f'MAPE train is : {(mean_absolute_percentage_error(inv_x, inv_xhat))}')\n","\n","print(f'MAPE test is : {(mean_absolute_percentage_error(test_y, yhat))}')\n","# print(f'MAPE test is : {(mean_absolute_percentage_error(inv_y, inv_yhat))}')\n","\n","print(f'R2 train is : {r2_score(train_y, xhat)}')\n","# print(f'R2 train is : {r2_score(inv_x, inv_xhat)}')\n","\n","print(f'R2 test is : {r2_score(test_y, yhat)}')\n","# print(f'R2 test is : {r2_score(inv_y, inv_yhat)}')\n"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":142,"status":"aborted","timestamp":1674184073661,"user":{"displayName":"King JIN","userId":"03868046888723066623"},"user_tz":-420},"id":"CbmyaYT2sY8S"},"outputs":[],"source":["print('Actual :', test_y)\n","print('Predicted:', yhat)\n","# plot history\n","pyplot.plot(test_y, label='Actual')\n","pyplot.plot(yhat, label='Forecasting', color='r')\n","pyplot.xlabel('Timestep')\n","pyplot.ylabel('Result')\n","pyplot.legend()\n","pyplot.show()"]},{"cell_type":"code","source":["#invert scaling untuk peramalan\n","inv_xhat = concatenate((xhat, train_X[:, 1:]), axis=1)\n","inv_xhat = scaler.inverse_transform(inv_xhat)\n","inv_xhat = inv_xhat[:,0]\n","print('========================================================\\n', inv_xhat)\n","\n","#invert scaling untuk aktual\n","train_y = train_y.reshape((len(train_y), 1))\n","print('========================================================\\n', train_y)\n","inv_x = concatenate((train_y, train_X[:, 1:]), axis=1)\n","inv_x = scaler.inverse_transform(inv_x)\n","inv_x = inv_x[:,0]\n","print('========================================================\\n', inv_x)"],"metadata":{"id":"7-o_ZM5XzfPw","executionInfo":{"status":"aborted","timestamp":1674184073662,"user_tz":-420,"elapsed":143,"user":{"displayName":"King JIN","userId":"03868046888723066623"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_y = train_y.reshape((len(train_y), 1))\n","test_y = test_y.reshape((len(test_y), 1))"],"metadata":{"id":"a9UKphsh0iYc","executionInfo":{"status":"aborted","timestamp":1674184073662,"user_tz":-420,"elapsed":143,"user":{"displayName":"King JIN","userId":"03868046888723066623"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":143,"status":"aborted","timestamp":1674184073663,"user":{"displayName":"King JIN","userId":"03868046888723066623"},"user_tz":-420},"id":"6YM3CTb4LrDe"},"outputs":[],"source":["# make a prediction\n","yhat = model.predict(test_X)\n","print(yhat)\n","test_X = test_X.reshape((test_X.shape[0], test_X.shape[2]))\n","print('========================================================\\n', test_X)\n","\n","# invert scaling for forecast\n","inv_yhat = concatenate((yhat, test_X[:, -21:]), axis=1)\n","inv_yhat = scaler.inverse_transform(inv_yhat)\n","inv_yhat = inv_yhat[:,0]\n","print('========================================================\\n', inv_yhat)\n","\n","# invert scaling for actual\n","test_y = test_y.reshape((len(test_y), 1))\n","print('========================================================\\n', test_y)\n","inv_y = concatenate((test_y, test_X[:, -21:]), axis=1)\n","inv_y = scaler.inverse_transform(inv_y)\n","inv_y = inv_y[:,0]\n","print('========================================================\\n', inv_y)"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":143,"status":"aborted","timestamp":1674184073663,"user":{"displayName":"King JIN","userId":"03868046888723066623"},"user_tz":-420},"id":"CkOr-88SSaPq"},"outputs":[],"source":["b = 0\n","for x in range(0, len(yhat)):\n","  a = (yhat[x] - test_y[x])\n","  if a < 0:\n","    a = a*(-1)\n","  a = (a/test_y[x])*100\n","  b += a\n","print(b/len(test_y))"]},{"cell_type":"code","source":["pyplot.plot(valuesAll, label='Actual')\n","pyplot.plot(test_y, label='test y')\n","pyplot.legend()\n","pyplot.show()"],"metadata":{"id":"LwaEoxCF26xP","executionInfo":{"status":"aborted","timestamp":1674184073664,"user_tz":-420,"elapsed":144,"user":{"displayName":"King JIN","userId":"03868046888723066623"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["valuesAll = reframedMin['var1(t)'].values"],"metadata":{"id":"z9DuTtWB3Q8e","executionInfo":{"status":"aborted","timestamp":1674184073675,"user_tz":-420,"elapsed":154,"user":{"displayName":"King JIN","userId":"03868046888723066623"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":155,"status":"aborted","timestamp":1674184073676,"user":{"displayName":"King JIN","userId":"03868046888723066623"},"user_tz":-420},"id":"jx_pnJgcG7yt"},"outputs":[],"source":["xhat = xhat.reshape((xhat.shape[0], xhat.shape[2]))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uR8_biKZnFjL","executionInfo":{"status":"aborted","timestamp":1674184073677,"user_tz":-420,"elapsed":156,"user":{"displayName":"King JIN","userId":"03868046888723066623"}}},"outputs":[],"source":["xhat.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ioRfj3m3HBUt","executionInfo":{"status":"aborted","timestamp":1674184073677,"user_tz":-420,"elapsed":156,"user":{"displayName":"King JIN","userId":"03868046888723066623"}}},"outputs":[],"source":["train_X.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RaXdAe6kr3XF","executionInfo":{"status":"aborted","timestamp":1674184073678,"user_tz":-420,"elapsed":156,"user":{"displayName":"King JIN","userId":"03868046888723066623"}}},"outputs":[],"source":["yhat = yhat.reshape((yhat.shape[0], yhat.shape[2]))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dQIhJAdAmpVl","executionInfo":{"status":"aborted","timestamp":1674184073682,"user_tz":-420,"elapsed":160,"user":{"displayName":"King JIN","userId":"03868046888723066623"}}},"outputs":[],"source":["yhat.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uh5-s6BxsAKk","executionInfo":{"status":"aborted","timestamp":1674184073683,"user_tz":-420,"elapsed":161,"user":{"displayName":"King JIN","userId":"03868046888723066623"}}},"outputs":[],"source":["test_X.shape"]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}