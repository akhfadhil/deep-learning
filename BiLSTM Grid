{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMWraO37TPME4dHDvGlPN9b"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"jZ3GyPMrtsN2"},"outputs":[],"source":["import pandas as pd\n","from pandas import DataFrame\n","from pandas import concat\n","from matplotlib import pyplot\n","from sklearn.preprocessing import MinMaxScaler\n","import time\n","from numpy import concatenate\n","import numpy as np\n","import seaborn as sns\n","\n","from keras.layers.convolutional import Conv1D\n","from tensorflow.keras.layers import MaxPool1D\n","from keras.layers import Flatten\n","\n","from scipy.stats import randint as sp_randint\n","from random import randrange as sp_randrange\n","from sklearn.model_selection import RandomizedSearchCV\n","\n","from sklearn.model_selection import GridSearchCV\n","from keras.wrappers.scikit_learn import KerasRegressor\n","from keras.callbacks import EarlyStopping\n","\n","from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import mean_absolute_error\n","from sklearn.metrics import r2_score\n","from tensorflow.python.keras.layers import Dense, LSTM , Dropout, GRU, SimpleRNN\n","from keras.layers import Bidirectional, LSTM, Dropout, Dense\n","# from keras.layers import Bidirectional\n","from tensorflow.python.keras import Sequential\n","from math import sqrt;\n","import tensorflow as tf"]},{"cell_type":"code","source":["# import data\n","url = \"https://drive.google.com/file/d/1u95FUEFI29NV-LmdCRHzRwj-t4tWH87m/view?usp=share_link\"\n","url='https://drive.google.com/uc?id=' + url.split('/')[-2]\n","df = pd.read_csv(url, parse_dates = True,index_col=0)\n","\n","# drop kolom yang semuanya kosong\n","df = df.drop(['generation hydro pumped storage aggregated', 'forecast wind offshore eday ahead'], axis=1)\n","\n","# drop row yang contain missing value\n","df = df.dropna(axis=0)\n","\n","# memindah kolom target ke urutan terakhir\n","cols = list(df.columns.values) #Make a list of all of the columns in the df\n","cols.pop(cols.index('total load actual')) #Remove b from list\n","# cols.pop(cols.index('x')) #Remove x from list\n","df = df[cols+['total load actual']] #Create new dataframe with columns in the order you want\n","\n","# mengambil valuenya ajah\n","values = df.values\n","train = values[:, :]\n","test = values[:, :]\n","\n","#split train test\n","train_X, train_y = train[:, :-1], train[:, -1]\n","test_X, test_y = test[:, :-1], test[:, -1]\n","\n","#reshap input menjadi 3D ([)samples, timesteps, features)\n","train_X = train_X.reshape((train_X.shape[0], 1, train_X.shape[1]))\n","test_X = test_X.reshape((test_X.shape[0], 1, test_X.shape[1]))"],"metadata":{"id":"ha4I9NNvt5-o"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def create_model_bilstm(neurons=32, optimizer='adam', loss='mse', batch_size=32, epochs=10, hl=2):\n","  model = Sequential()\n","  model.add(Bidirectional(LSTM(neurons, return_sequences = True, input_shape=(train_X.shape[1], train_X.shape[2]))))\n","  for i in range(hl-1):\n","    model.add(Bidirectional(LSTM(units = neurons, return_sequences = True)))\n","  model.add(Bidirectional(LSTM(units = neurons)))\n","  model.add(Dense(1, activation='sigmoid'))\n","  model.compile(loss=loss, optimizer=optimizer)\n","\n","  history = model.fit(train_X, train_y, epochs=epochs, batch_size=batch_size, verbose=1, shuffle=False)\n","\n","  return model"],"metadata":{"id":"S5TCMhEKt52v"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["rf_params = {\n","    'optimizer': ['adam','rmsprop'],\n","    'hl': [2, 5, 10],\n","    'loss': ['mse','mae', 'huber'],\n","    'batch_size': [100, 1000],\n","    'neurons':[32, 64],\n","    'epochs':[50, 100]\n","    # 'patience':[2,5]\n","}\n","clf = KerasRegressor(build_fn=create_model_bilstm, verbose=0)\n","grid = GridSearchCV(clf, rf_params, cv=3,scoring='neg_mean_squared_error')\n","start = time.time()\n","grid.fit(train_X, train_y)\n","end = time.time()\n","print('Processing Time {} seconds.'.format(end-start))\n","print(grid.best_params_)"],"metadata":{"id":"QE-QSU1ft5t1"},"execution_count":null,"outputs":[]}]}